/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;

component grammar SysMLRD extends de.monticore.lang.sysml.advanced.SysMLConstraints
  {

  /* REQUIREMENT DEFINITIONS */

  RequirementDefinition implements SysMLType, PackagedDefinitionMember = RequirementDefDeclaration RequirementBody;
  RequirementDefDeclaration = ["abstract"]? "requirement" "def" ("id" reqId:SysMLName)? SysMLName
    RequirementDefParameterList EmptyReturnParameterPart SuperclassingList?;

  RequirementDefParameterList = EmptyParameterMember
    | ( "(" EmptyParameterMember ")")
    | ( "(" (ParameterMember || ",")+ ")" ) ;
  scope RequirementBody = ";" | ( "{" RequirementMembers "}" );
  RequirementMembers = (NestedDefinitionMember | NestedUsageMember |  RequirementConstraintMember | ImportUnit )*;

  RequirementConstraintUsage implements SysMLType =
    ((( SysMLName)? TypePart? "as")? Subset | "constraint" (SysMLName)?  TypePart?)
     ConstraintParameterPart ConstraintBody;

  /* ===================================================*/
  /* ============ ASTRULES getName() for symbols =======*/
  /* ===================================================*/
  astrule RequirementDefinition =
    method public String getName(){
      return this.getRequirementDefDeclaration().getName();
    }
  ;
  astrule RequirementDefDeclaration =
    method public String getName(){
      return this.getSysMLName().getName();
    }
  ;
  astrule RequirementConstraintUsage =
    method public String getName(){
      if( this.isPresentSysMLName()){
        return this.getSysMLName().getName();
      }
      return "";
    }
  ;

  /* REQUIREMENT DEFINITION MEMBERSHIPS */

  RequirementConstraintMember = DefinitionMemberPrefix RequirementConstraintKind RequirementConstraintUsage;
  RequirementConstraintKind = assumption:["assume"] | requirement:["require"];

  /* REQUIREMENTS */

  RequirementUsagePackagedUsageMember implements SysMLType, PackagedUsageMember =
    ["abstract"]? "requirement" RequirementUsage;
  BehaviorUsageMemberRequirementUsage implements SysMLType, BehaviorUsageMember =
    DefinitionMemberPrefix ["abstract"]?  ("ref" "requirement" | isComposite:"requirement") RequirementUsage;
  BehaviorUsageMemberSatisfyRequirementUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix  "satisfy" SatisfyRequirementUsage;

  scope RequirementUsage = RequirementDeclaration RequirementBody;
  RequirementDeclaration  = ( "id" reqId:SysMLName)?
    (SysMLNameAndTypePart ConstraintParameterPart
    | TypePart? ( ActionParameterList EmptyReturnParameterPart )? ValuePart?
  	| RedefinesKeyword Redefinition
  	TypePart? ActionParameterList? EmptyReturnParameterPart ValuePart?
  	);

  SatisfyRequirementUsage =
    (((firstName:SysMLName)? firstType:TypePart? "as")? Subset
    | "requirement" (secondName:SysMLName)? secondType:TypePart?)
    ( "by" SatisfactionConnectorMember)?
    ConstraintParameterPart InvariantPart RequirementBody;

  SatisfactionConnector = EmptySourceEndMember ConnectorEndMember;

  /* ===================================================*/
  /* ============ ASTRULES getName() for symbols =======*/
  /* ===================================================*/
  astrule SatisfyRequirementUsage =
    method public String getName(){
      if( this.isPresentFirstName()){
        return this.getFirstName().getName();
      } else  if (this.isPresentSecondName()){
        return this.getSecondName().getName();
      }
      return "";
    }
  ;
  astrule RequirementUsage =
    method public String getName(){
      return this.getRequirementDeclaration().getName();
    }
  ;
  astrule RequirementDeclaration =
    method public String getName(){
      if( this.isPresentSysMLNameAndTypePart()){
        return this.getSysMLNameAndTypePart().getName();
      }
      return "";
    }
  ;
  astrule RequirementUsagePackagedUsageMember =
    method public String getName(){
      return this.getRequirementUsage().getName();
    }
  ;
  astrule BehaviorUsageMemberRequirementUsage =
    method public String getName(){
      return this.getRequirementUsage().getName();
    }
  ;

  /* REQUIREMENT MEMBERSHIPS */
  SatisfactionConnectorMember = SatisfactionConnector;
}