/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;

component grammar SysMLSTM extends de.monticore.lang.sysml.advanced.SysMLSuccessions {

  /* STATE DEFINITIONS */

  StateDefinitionUnit implements Unit =  StateDefinition;
  StateDefinition implements SysMLType, PackagedDefinitionMember = StateDefDeclaration StateBody;
  StateDefDeclaration = ["abstract"]? "state" "def"  Name ParameterList? SuperclassingList?;
  scope StateBody = ";" | "{" StateBodyPart "}";
  StateBodyPart = (EntryActionMember EntryTransitionMember*)? DoActionMember? ExitActionMember? StateBodyItem*;
  StateBodyItem = NestedDefinitionMember
    | StructureUsageMember
    | StateMember TargetTransitionSuccessionMember*
    | TransitionStepMember
    | SysMLImportStatement;
  StateActionUsage = EmptyActionUsage ";" | PerformedActionUsage ActivityBody;

  /* ===================================================*/
  /* ============ ASTRULES getName() for symbols =======*/
  /* ===================================================*/
  astrule StateDefinition =
    method public String getName(){
      return this.getStateDefDeclaration().getName();
    };

  /* STATE MEMBERSHIPS */

  EntryActionMember = DefinitionMemberPrefix kind:EntryActionKind StateActionUsage;
  EntryActionKind = "entry";
  DoActionMember = DefinitionMemberPrefix kind:DoActionKind StateActionUsage;
  DoActionKind = "do";
  ExitActionMember = DefinitionMemberPrefix kind:ExitActionKind StateActionUsage;
  ExitActionKind = "exit";

  StateMember = DefinitionMemberPrefix ["abstract"]? ("ref" "state" | isComposite:["state"]) StateUsage;
  EntryTransitionMember = DefinitionMemberPrefix (GuardedTargetSuccession | "then" TransitionSuccession ) ";";

  TargetTransitionSuccessionMember =  DefinitionMemberPrefix TargetTransitionStep ";";
  TransitionStepMember = DefinitionMemberPrefix TransitionStep ";";

 /* STATES */
  StateUnit implements SysMLType, Unit =  StateDeclaration StateBody;
  StateDeclaration = ["abstract"]? "state" SysMLNameAndTypePart ActionParameterList? SubsettingPart ValuePart?;
  StateUsage = ActionOrStateUsageDeclaration StateBody;
  ExhibitStateUsage implements SysMLType = (((( Name) TypePart? "as")? Subset)
    | ( "state"  Name? TypePart? )) ActionParameterList? SubsettingPart ValuePart? StateBody;

  StateUsagePackagedUsageMember implements SysMLType, PackagedUsageMember = ["abstract"]? "state" StateUsage;
  BehaviorUsageMemberStateUsage implements SysMLType, BehaviorUsageMember =
    DefinitionMemberPrefix ["abstract"]?  ("ref" "state" | isComposite:"state") StateUsage;

  BehaviorUsageMemberExhibitStateUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix  "exhibit" ExhibitStateUsage;

  /* ===================================================*/
  /* ============ ASTRULES getName() for symbols =======*/
  /* ===================================================*/
  astrule StateUnit =
    method public String getName(){
      return this.getStateDeclaration().getSysMLNameAndTypePart().getName();
    };
  astrule StateUsage =
    method public String getName(){
      return this.getActionOrStateUsageDeclaration().getName();
    };
  astrule StateUsagePackagedUsageMember =
    method public String getName(){
      return this.getStateUsage().getName();
    };
  astrule BehaviorUsageMemberStateUsage =
    method public String getName(){
      return this.getStateUsage().getName();
    };
}
