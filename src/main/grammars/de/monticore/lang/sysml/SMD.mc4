/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;


component grammar SMD extends de.monticore.lang.sysml.advanced.SysMLAdvanced {

  /* STATE DEFINITIONS */

  StateDefinitionUnit implements Unit = UnitPrefix StateDefinition;
  StateDefinition implements PackagedDefinitionMember = StateDefDeclaration StateBody;
  StateDefDeclaration = ["abstract"]? "state" "def" name:SysMLName ParameterList? SuperclassingList?;
  StateBody = ";" | "{" StateBodyPart "}";
  StateBodyPart = (EntryActionMember EntryTransitionMember*)? DoActionMember? ExitActionMember? StateBodyItem*;
  StateBodyItem = NestedDefinitionMember
    | StructureUsageMember
    | StateMember TargetTransitionSuccessionMember*
    | TransitionStepMember
    | ImportUnit;
  StateActionUsage = EmptyActionUsage ";" | PerformedActionUsage ActivityBody;



  /* STATE MEMBERSHIPS */

  EntryActionMember = DefinitionMemberPrefix kind:EntryActionKind StateActionUsage;
  EntryActionKind = "entry";
  DoActionMember = DefinitionMemberPrefix kind:DoActionKind StateActionUsage;
  DoActionKind = "do";
  ExitActionMember = DefinitionMemberPrefix kind:ExitActionKind StateActionUsage;
  ExitActionKind = "exit";

  StateMember = DefinitionMemberPrefix ["abstract"]? ("ref" "state" | isComposite:["state"]) StateUsage;
  EntryTransitionMember = DefinitionMemberPrefix (GuardedTargetSuccession | "then" TransitionSuccession ) ";";

  TargetTransitionSuccessionMember =  DefinitionMemberPrefix TargetTransitionStep ";";
  TransitionStepMember = DefinitionMemberPrefix TransitionStep ";";

 /* STATES */
  StateUnit implements Unit = UnitPrefix StateDeclaration StateBody;
  StateDeclaration = ["abstract"]? "state" name:SysMLName TypePart? ActionParameterList? SubsettingPart ValuePart?;
  StateUsage = ActionOrStateUsageDeclaration StateBody;
  ExhibitStateUsage = ((((name:SysMLName) TypePart? "as")? Subset)
    | ( "state" name:SysMLName? TypePart? )) ActionParameterList? SubsettingPart ValuePart? StateBody;

  StateUsagePackagedUsageMember implements PackagedUsageMember =       ["abstract"]? "state" StateUsage;
  BehaviorUsageMemberStateUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix ["abstract"]?  ("ref" "state" | isComposite:"state") StateUsage;
  BehaviorUsageMemberExhibitStateUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix  "exhibit" ExhibitStateUsage;
}
