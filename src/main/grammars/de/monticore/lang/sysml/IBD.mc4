/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;


component grammar IBD extends de.monticore.lang.sysml.basics.SysMLCommon,
 de.monticore.lang.sysml.AD //TODO refactor, needs at least ParameterList
  {

  PartUnit implements Unit = UnitPrefix PartDeclaration UsageCompletion;
  PartDeclaration = ["abstract"]? "part" SysMLName TypePart? SubsettingPart;


 //TODO isComposite ?=  for NonPortStructureUsageMember
  PartNonPortStructureUsageMember implements NonPortStructureUsageMember =
    ["abstract"]? "part" PartProperty;
  PartPropertyPackagedUsageMember implements PackagedUsageMember =
    ["abstract"]? "part" PartProperty; //TODO check if merge with above


  PartProperty = Usage;




  ReferenceProperty = Usage;


  //TODO which file?
  /* CONSTRAINT DEFINITIONS */
  ConstraintDefinitionUnit implements Unit = UnitPrefix ConstraintDefinition;
  ConstraintDefinition implements PackagedDefinitionMember = ConstraintDefDeclaration ConstraintBody;
  ConstraintDefDeclaration = ["abstract"]? "constraint" "def" name:SysMLName ParameterList? EmptyReturnParameterPart?
    SuperclassingList?;
  ConstraintBody = ";" | "{" ConstraintMembers "}";
  ConstraintMembers = (NestedDefinitionMember | NestedUsageMember | ImportUnit)* ConstraintExpressionMember?;
  EmptyReturnParameterPart = EmptyReturnParameterMember;

  /* CONSTRAINT DEFINITION MEMBERSHIPS */
  EmptyReturnParameterMember = EmptyParameter;
  ConstraintExpressionMember = DefinitionMemberPrefix Expression;


  //---------------------------------
  /* CONSTRAINTS */
  ConstraintUsage = ConstraintDeclaration ConstraintBody;
  ConstraintDeclaration =
    (name:SysMLName TypePart? ConstraintParameterPart)
    | (TypePart? (ActionParameterList EmptyReturnParameterPart?)? ValuePart?)
    | (RedefinesKeyword Redefinition+ TypePart? ActionParameterList? EmptyReturnParameterPart? ValuePart?);
  ConstraintParameterPart = ActionParameterList? EmptyReturnParameterPart? SubsettingPart ValuePart?;
  AssertConstraintUsage =
    (((( name:SysMLName)? TypePart? "as" )? Subset+ ) | ("constraint" (name:SysMLName)? TypePart?) )
    ConstraintParameterPart InvariantPart? ConstraintBody; //TODO actually InvariantPart is necessary
  InvariantPart = TrueLiteralMember; //TODO
  TrueLiteralExpression = EmptyNT; //{SysML::LiteralBoolean} TODO

  /* CONSTRAINT MEMBERSHIPS */
  TrueLiteralMember = TrueLiteralExpression;
}