/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;


component grammar IBD extends de.monticore.lang.sysml.basics.SysMLCommon,
 de.monticore.lang.sysml.AD //TODO refactor, needs at least ParameterList
  {

  PartUnit implements Unit = UnitPrefix PartDeclaration UsageCompletion;
  PartDeclaration = ["abstract"]? "part" SysMLName TypePart SubsettingPart;


 //TODO isComposite ?=  for NonPortStructureUsageMember
  PartNonPortStructureUsageMember implements NonPortStructureUsageMember =
    "part" PartProperty;
  PartPackagedUsageMember implements PackagedUsageMember =
    "part" PartProperty;


  PartProperty = Usage;

  //TODO is this BDD?

  //TOdO FeatureDirection
  ReferencePropertyNonPortStructureUsageMember implements NonPortStructureUsageMember =
    "ref" ReferenceProperty;

  ReferenceProperty = Usage;



  /* CONSTRAINT DEFINITIONS */
  ConstraintDefinitionUnit implements Unit = UnitPrefix ConstraintDefinition;
  ConstraintDefinition = ConstraintDefDeclaration ConstraintBody;
  ConstraintDefDeclaration = ["abstract"]? "constraint" "def" name:SysMLName ParameterList? EmptyReturnParameterPart
    SuperclassingList?;
  ConstraintBody = ";" | "{" ConstraintMembers "}";
  ConstraintMembers = (NestedDefinitionMember | NestedUsageMember | ImportUnit)* ConstraintExpressionMember?;
  EmptyReturnParameterPart = EmptyReturnParameterMember;

  /* CONSTRAINT DEFINITION MEMBERSHIPS */
  EmptyReturnParameterMember = EmptyParameter;
  ConstraintExpressionMember = DefinitionMemberPrefix Expression;


  //---------------------------------
  /* CONSTRAINTS */
  ConstraintUsage = ConstraintDeclaration ConstraintBody;
  ConstraintDeclaration =
    (name:SysMLName TypePart? ConstraintParameterPart)
    | (TypePart? (ActionParameterList EmptyReturnParameterPart)? ValuePart?)
    | (RedefinesKeyword Redefinition+ TypePart? ActionParameterList? EmptyReturnParameterPart ValuePart?);
  ConstraintParameterPart = ActionParameterList? EmptyReturnParameterPart SubsettingPart ValuePart?;
  AssertConstraintUsage =
    (((( name:SysMLName)? TypePart? "as" )? Subset+ ) | ("constraint" (name:SysMLName)? TypePart?) )
    ConstraintParameterPart InvariantPart ConstraintBody;
  InvariantPart = TrueLiteralMember;
  TrueLiteralExpression = SysMLName; //{SysML::LiteralBoolean}

  /* CONSTRAINT MEMBERSHIPS */
  TrueLiteralMember = TrueLiteralExpression;
}