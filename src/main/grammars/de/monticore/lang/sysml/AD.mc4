/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;


component grammar AD extends de.monticore.lang.sysml.basics.SysMLCommon {


  /* ACTIVITIES */

  ActivityUnit implements Unit = UnitPrefix Activity;
  Activity implements PackagedDefinitionMember = ActivityDeclaration ActivityBody;
  ActivityDeclaration = ["abstract"]? "activity" name:SysMLName ParameterList? SuperclassingList?;
  ParameterListStd implements ParameterList = "(" (ParameterMember || "," )* ")";
  ActivityBodyStd implements ActivityBody = ";" | ("{" ActivityBodyItem* "}");
  ActivityBodyItem =
    NestedDefinitionMember
    | StructureUsageMember
    | InitialNodeMember TargetSuccessionMember*
    | EmptySuccessionMember? ActivityNodeMember TargetSuccessionMember*
    | GuardedSuccessionMember
    | ImportUnit;


  /* ACTIVITIY MEMBERSHIPS */

  ParameterMember = direction:FeatureDirection? memberName:SysMLName Parameter;
  InitialNodeMember = DefinitionMemberPrefix "first" memberFeature:QualifiedName ";";
  ActivityNodeMember = DefinitionMemberPrefix ActivityNode;
  TargetSuccessionMember = DefinitionMemberPrefix
    (DefaultTargetSuccession | TargetSuccession | GuardedTargetSuccession) ";";
  GuardedSuccessionMember = GuardedSuccession ";";



  //TODO where does Action belong to?
  /* ACTIONS */
  ActionUnit implements Unit = UnitPrefix ActionDeclaration ActivityBody;
  ActionDeclaration = ["abstract"]? "action" name:SysMLName TypePart? ActionParameterList? SubsettingPart ValuePart?;
  ActionUsageStd implements ActionUsage = ActionUsageDeclaration ActivityBody;
  ActionUsageDeclaration = (name:SysMLName TypePart? ActionParameterList? SubsettingPart ValuePart?)
    | (TypePart? ActionParameterList? ValuePart?)
    | (RedefinesKeyword Redefinition+ TypePart ActionParameterList? ValuePart?);

  ActionParameterList = "(" ( ActionParameterMemberAndFlowMember || ",")* ")";
  ActionParameterMemberAndFlowMember = ActionParameterMember ActionParameterFlowMember?;
  ActionParameter = ParameterTypePart? ValuePart?;
  ActionParameterFlow =
    ("stream" | "flow") EmptyItemFeatureMember "from" ItemFlowEndMember;

  PerformActionUsage = PerformActionUsageDeclaration ActivityBody;
  PerformActionUsageDeclaration = ((( name:SysMLName TypePart? "as" )? Subset+)
    |( "action" (name:SysMLName)? TypePart?)) ActionParameterList? SubsettingPart ValuePart?;

  /* ACTIVITY NODES */
  ActivityNode = ActionNode | ControlNode;
  ActionNode = ActionNodeDeclaration ActivityBody;
  ActionNodeDeclaration = ActionUsageNodeDeclaration | PerformActionNodeDeclaration | AcceptActionNodeDeclaration | SendActionNodeDeclaration;
  ActionUsageNodeDeclaration = ["abstract"]? (("ref" "action") | isComposite:["action"]) ActionUsageDeclaration;
  PerformActionNodeDeclaration = isComposite:["perform"] (name:SysMLName TypePart? "as")? Subset ActionParameterList?
    SubsettingPart ValuePart?;
  AcceptActionNodeDeclaration = EmptyParameterMember "accept" (name:SysMLName TypePart?)? "(" ItemFeatureMember ")";
  SendActionNodeDeclaration = EmptyParameterMember EmptyItemFeatureMember
    "send" ( ( name:SysMLName TypePart? )? "of")? ExpressionMember "to" ExpressionMember;
  ControlNode = MergeNode	| DecisionNode | JoinNode | ForkNode;

  MergeNode = "merge" SysMLNameAndTypePartOptional ";";
  DecisionNode = "decide" SysMLNameAndTypePartOptional ";";
  JoinNode = "join" SysMLNameAndTypePartOptional ";";
  ForkNode = "fork" SysMLNameAndTypePartOptional ";";
  EmptyParameter;
  SysMLNameAndTypePartOptional = (name:SysMLName TypePart?)?;


  /* ACTION MEMBERSHIPS */
  ActionParameterMember = (direction:FeatureDirection | direction:FeatureDirection? memberName:SysMLName)
    ActionParameter;
  ActionParameterFlowMember = ActionParameterFlow;
  EmptySuccessionMember = EmptySuccession;
  EmptyParameterMember = EmptyParameter;

  /* SUCCESSIONS */
  Succession = SuccessionDeclaration ";";
  SuccessionDeclaration = ( ( name:SysMLName)? TypePart? "first" )? ConnectorEndMember "then" ConnectorEndMember;
  TargetSuccession = "then" MultiplicitySourceEndMember ConnectorEndMember;
  EmptySuccession =  "then" MultiplicitySourceEndMember EmptyTargetEndMember;
  GuardedSuccession = "succession" (( name:SysMLName)? TypePart? "first")?
  TransitionSourceMember GuardExpressionMember "then" TransitionSuccessionMember;
  GuardedTargetSuccession = GuardExpressionMember  "then" TransitionSuccessionMember;
  DefaultTargetSuccession = "else" TransitionSuccessionMember;

  /* ITEM FLOWS */ //Is this AD and IBD?
  ItemFlow = ItemFlowDeclaration DefinitionBody;
  SuccessionItemFlow = ItemFlowDeclaration DefinitionBody;
  ItemFlowDeclaration = ( (name:SysMLName)? TypePart?
    (( "of" ItemFeatureMember) | (EmptyItemFeatureMember))
    "from" | EmptyItemFeatureMember )
    ItemFlowEndMember "to" ItemFlowEndMember;
  ItemFeatureTyping = FeatureTyping MultiplicityMember?;
  EmptyItemFeature;
  ItemFlowEnd = ItemFlowFeatureMember;
  ItemFlowFeature = Redefinition;

  /* ITEM FLOW MEMBERSHIPS */
  ItemFeatureMember = (memberName:SysMLName TypedByKeyword)? ItemFeatureTyping;
  ItemFlowEndMember = ItemFlowEnd;
  ItemFlowFeatureMember = ItemFlowFeature;
  EmptyItemFeatureMember = EmptyItemFeature;

  /* TRANSITIONS */
  TransitionStep = "transition" (SysMLNameAndTypePartOptional "first")? TransitionSourceMember
    TriggerStepMember? GuardExpressionMember? EffectBehaviorMember? "then" TransitionSuccessionMember;
  TargetTransitionStep = TriggerStepMember? GuardExpressionMember? EffectBehaviorMember? "then"
  TransitionSuccessionMember;
  TriggerStep = EmptyParameterMember ItemFeatureMember;
  EffectBehaviourUsage = EmptyActionUsage | PerformedActionUsage ( "{" ActivityBodyItem* "}" )?;
  TransitionSuccession = EmptySourceEndMember ConnectorEndMember;

  /* TRANSITION MEMBERSHIPS */
  TransitionSourceMember = memberFeature:QualifiedName;
  TransitionSuccessionMember = TransitionSuccession;
  //TODO add abstraction layer?
  TriggerStepMember = kind:TriggerFeatureKind TriggerStep;
  TriggerFeatureKind = kind:"accept"; //Remark: this is an enum in xtext
  GuardExpressionMember = kind:GuardFeatureKind Expression;
  GuardFeatureKind = guard:"if"; //Remark: this is an enum in xtext
  EffectBehaviorMember = kind: EffectFeatureKind EffectBehaviourUsage;
  EffectFeatureKind = effect:"do"; //Remark: this is an enum in xtext
}
