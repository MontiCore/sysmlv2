/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;

component grammar RequirementDiagram extends de.monticore.lang.sysml.advanced.SysMLAdvanced
  {

  /* REQUIREMENT DEFINITIONS */

  RequirementDefinition implements PackagedDefinitionMember = RequirementDefDeclaration RequirementBody;
  RequirementDefDeclaration = ["abstract"]? "requirement" "def" ("id" reqId:SysMLName)? name:SysMLName
    RequirementDefParameterList EmptyReturnParameterPart SuperclassingList?;
  RequirementDefParameterList = EmptyParameterMember
    | ( "(" EmptyParameterMember ")")
    | ( "(" (ParameterMember || ",")+ ")" ) ;
  RequirementBody = ";" | ( "{" RequirementMembers "}" );
  RequirementMembers = (NestedDefinitionMember | NestedUsageMember |  RequirementConstraintMember | ImportUnit )*;
  RequirementConstraintUsage = ((( name:SysMLName)? TypePart? "as")? Subset | "constraint" (name:SysMLName)? TypePart?)
     ConstraintParameterPart ConstraintBody;

  /* REQUIREMENT DEFINITION MEMBERSHIPS */

  RequirementConstraintMember = DefinitionMemberPrefix RequirementConstraintKind RequirementConstraintUsage;
  RequirementConstraintKind = assumption:["assume"] | requirement:["require"];

  /* REQUIREMENTS */

  RequirementUsagePackagedUsageMember implements PackagedUsageMember = ["abstract"]? "requirement" RequirementUsage;
  BehaviorUsageMemberRequirementUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix ["abstract"]?  ("ref" "requirement" | isComposite:"requirement") RequirementUsage;
  BehaviorUsageMemberSatisfyRequirementUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix  "satisfy" SatisfyRequirementUsage;

  RequirementUsage = RequirementDeclaration RequirementBody;
  RequirementDeclaration  = ( "id" reqId:SysMLName)?
    (SysMLNameAndTypePart ConstraintParameterPart
    | TypePart? ( ActionParameterList EmptyReturnParameterPart )? ValuePart?
  	| RedefinesKeyword Redefinition
  	TypePart? ActionParameterList? EmptyReturnParameterPart ValuePart?
  	);

  SatisfyRequirementUsage =
    ((( name:SysMLName)? TypePart? "as")? Subset
    | "requirement" (name:SysMLName)? TypePart?)
    ( "by" SatisfactionConnectorMember)?
    ConstraintParameterPart InvariantPart RequirementBody;

  SatisfactionConnector = EmptySourceEndMember ConnectorEndMember;

  /* REQUIREMENT MEMBERSHIPS */
  SatisfactionConnectorMember = SatisfactionConnector;
}