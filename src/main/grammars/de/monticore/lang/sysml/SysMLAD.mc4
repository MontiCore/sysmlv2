/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;

component grammar SysMLAD extends de.monticore.lang.sysml.advanced.SysMLSuccessions {

  /* ACTIVITIES */

  ActivityUnit implements Unit = Activity;
  Activity implements SysMLType, PackagedDefinitionMember = ActivityDeclaration ActivityBody;

  ActivityDeclaration = ["abstract"]? "activity" Name ParameterList? SuperclassingList?;

  ParameterListStd implements ParameterList = "(" (ParameterMember || "," )* ")";
  scope ActivityBodyStd implements ActivityBody = ";" | ("{" ActivityBodyItem* "}");
  ActivityBodyItemStd implements ActivityBodyItem =
    NestedDefinitionMember
    | StructureUsageMember
    | InitialNodeMember TargetSuccessionMember*
    | EmptySuccessionMember? ActivityNodeMember TargetSuccessionMember*
    | GuardedSuccessionMember
    | ImportUnit;

  /* ===================================================*/
  /* ============ ASTRULES getName() for symbols =======*/
  /* ===================================================*/
  astrule Activity =
    method public String getName(){
      return this.getActivityDeclaration().getName();
    };

  /* ACTIVITIY MEMBERSHIPS */

  ParameterMemberStd implements ParameterMember = direction:FeatureDirection? Name Parameter;

  InitialNodeMember = DefinitionMemberPrefix "first" memberFeature:MCQualifiedName ";";
  ActivityNodeMember = DefinitionMemberPrefix ActivityNode;
  TargetSuccessionMember = DefinitionMemberPrefix
    (DefaultTargetSuccession | TargetSuccession | GuardedTargetSuccession) ";";
  GuardedSuccessionMember = GuardedSuccession ";";


  AssociationEndMemberActionUsage implements AssociationEndMember =
     ["abstract"]?"end" ("ref" "action" | isComposite:"action" ) ActionUsage;

  /* ACTIONS */

  ActionUnit implements Unit =  ActionDeclaration ActivityBody;
  ActionDeclaration = ["abstract"]? "action" SysMLNameAndTypePart ActionParameterList? SubsettingPart ValuePart?;
  ActionUsageStd implements SysMLType, ActionUsage = ActionOrStateUsageDeclaration ActivityBody;

  ActionUsagePackagedUsageMember implements PackagedUsageMember =      ["abstract"]? "action" ActionUsage;
  BehaviorUsageMemberActionUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix ["abstract"]?  ("ref" "action" | isComposite:"action") ActionUsage;
  BehaviorUsageMemberPerformActionUsage implements BehaviorUsageMember =
    DefinitionMemberPrefix "perform" PerformActionUsage;

  ActionParameterListStd implements ActionParameterList = "(" ( ActionParameterMemberAndFlowMember || ",")* ")";
  ActionParameterMemberAndFlowMember = ActionParameterMember ActionParameterFlowMember?;
  ActionParameter = ParameterTypePart? ValuePart?;
  ActionParameterFlow =
    ("stream" | "flow") EmptyItemFeatureMember "from" ItemFlowEndMember;

  PerformActionUsage = PerformActionUsageDeclaration ActivityBody;
  PerformActionUsageDeclaration implements SysMLType = (((  Name TypePart? "as" )? Subset+)
    |( "action" ( Name)? TypePart?)) ActionParameterList? SubsettingPart ValuePart?;

  /* ===================================================*/
  /* ============ ASTRULES getName() for symbols =======*/
  /* ===================================================*/
  astrule ActionUsageStd =
    method public String getName(){
      return this.getActionOrStateUsageDeclaration().getName();
    }
  ;

  /* ACTIVITY NODES */

  ActivityNode = ActionNode | ControlNode;
  ActionNode = ActionNodeDeclaration ActivityBody;
  ActionNodeDeclaration = ActionUsageNodeDeclaration | PerformActionNodeDeclaration | AcceptActionNodeDeclaration |
  SendActionNodeDeclaration;
  ActionUsageNodeDeclaration = ["abstract"]? (("ref" "action") | isComposite:["action"]) ActionOrStateUsageDeclaration;
  PerformActionNodeDeclaration = isComposite:["perform"] (SysMLNameAndTypePart "as")? Subset ActionParameterList?
    SubsettingPart ValuePart?;
  AcceptActionNodeDeclaration implements SysMLType
    = EmptyParameterMember "accept" SysMLNameAndTypePart? "(" ItemFeatureMember ")";
  SendActionNodeDeclaration implements SysMLType = EmptyParameterMember EmptyItemFeatureMember
    "send" ( SysMLNameAndTypePart? "of")? ExpressionMember "to" ExpressionMember;

  ControlNode = (["merge"] | ["decide"] | ["join"] | ["fork"]) SysMLNameAndTypePart? ";";

  /* ACTION MEMBERSHIPS */

  ActionParameterMember = (direction:FeatureDirection | direction:FeatureDirection? memberName: Name)
    ActionParameter;
  ActionParameterFlowMember = ActionParameterFlow;
  EmptySuccessionMember = EmptySuccession;

  PerformedActionUsageStd implements PerformedActionUsage =
    PerformActionUsageDeclaration | AcceptActionNodeDeclaration | SendActionNodeDeclaration;

  /* ===================================================*/
  /* ============ ASTRULES getName() for symbols =======*/
  /* ===================================================*/
  astrule AcceptActionNodeDeclaration =
    method public String getName(){
      if( this.isPresentSysMLNameAndTypePart()){
        return this.getSysMLNameAndTypePart().getName();
      }
      return "";
    }
  ;
  astrule SendActionNodeDeclaration =
      method public String getName(){
        if( this.isPresentSysMLNameAndTypePart()){
          return this.getSysMLNameAndTypePart().getName();
        }
        return "";
      }
    ;
}
