/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;

component grammar Ports extends de.monticore.lang.sysml.basics.SysMLCommonBasis,
  de.monticore.lang.sysml.basics.Usages,
  de.monticore.lang.sysml.basics.Associations{

  /* PORT DEFINITIONS */

  PortDefinitionStd implements PortDefinition, PackagedDefinitionMember  = PortDeclaration DefinitionBody;
  PortDeclaration = ["abstract"]? "port" "def" ClassifierDeclarationCompletion ConjugatedPortDefinitionMember;
  ConjugatedPortDefinition = PortConjugation;
  PortConjugation;

  /* PORT DEFINITION MEMBERSHIPS */

  ConjugatedPortDefinitionMember = ConjugatedPortDefinition;

  /* PORT USAGE */

  PortUsageStd implements PortUsage = Usage;
  ConjugatedPortUsageStd implements ConjugatedPortUsage= ConjugatePortUsageDeclaration UsageCompletion;
  ConjugatePortUsageDeclaration =
    name:SysMLName? ConjugatePortTypePart MultiplicityPart? SubsettingPart
    | RedefinesKeyword Redefinition ConjugatePortTypePart MultiplicityPart SubsettingPart;
  ConjugatePortTypePart = TypedByKeyword "~" ConjugatedPortTyping; //TypedByKeyword is defined in Usages
  ConjugatedPortTyping = SysMLName; // Remark: [SysML::PortDefinition | QualifiedName]

  /* Connectors */

  NonPortStructureUsageMemberConnectionUsage implements NonPortStructureUsageMember =
    ["abstract"]? "link" ConnectionUsage;
  NonPortStructureUsageMemberConnector implements NonPortStructureUsageMember =
    ["abstract"]? "connect" Connector;

  Connector = ConnectionPart AssociationBlockBody;
  ConnectionUsage = UsageDeclaration "connect" ConnectionPart AssociationBlockBody;
  ConnectionPart =  ownedFeatureMembership_compFrom:ConnectorEndMember "to"
      ownedFeatureMembership_compTo:ConnectorEndMember
      | ( "(" ( ConnectorEndMember | ",") ( ConnectorEndMember | ",")+ ")");

  ConnectorEnd = Subset MultiplicityMember?;

  MultiplicitySourceEnd = MultiplicityMember?;
  EmptySourceEnd;
  EmptyTargetEnd;

  /* CONNECTOR MEMBERSHIPS */
  ConnectorEndMember = (memberName:SysMLName "=>" )? ConnectorEnd;
  MultiplicitySourceEndMember = MultiplicitySourceEnd;
  EmptySourceEndMember = EmptySourceEnd;
  EmptyTargetEndMember = EmptyTargetEnd;

  /* INTERFACE CONNECTORS */
  InterfaceUsage = UsageDeclaration "connect" ConnectionPart InterfaceBody;
  NonPortStructureUsageMemberInterfaceUsage implements NonPortStructureUsageMember =
    ["abstract"]? "interface" InterfaceUsage;

  /* BINDING CONNECTORS */
  NonPortStructureUsageMemberBindingConnector implements NonPortStructureUsageMember =
    "bind" BindingConnector;

  BindingConnector = ((name:SysMLName)? TypePart? "as")?
    ConnectorEndMember "=" ConnectorEndMember DefinitionBody;

  /* INTERFACE DEFINITIONS */
  InterfaceDefinitionUnit implements Unit = UnitPrefix InterfaceDefinition;
  InterfaceDefinition implements PackagedDefinitionMember = InterfaceDeclaration InterfaceBody;
  InterfaceDeclaration = ["abstract"]? "interface" "def" ClassifierDeclarationCompletion;
  InterfaceBody = ";" | (
     "{"
      (NestedDefinitionMember | InterfaceUsageMember | ImportUnit)*
     "}"
    );

  /* INTERFACE DEFINITION MEMBERSHIPS */

  InterfaceUsageMember = NestedUsageMember | InterfaceEndMember | ConjugatedInterfaceEndMember ;
  InterfaceEndMember = DefinitionMemberPrefix
    ( ["abstract"]? "end" ["port"]? PortUsage);
    //isPort ?= 'end' is in Xtext, which is most likely an error and should be isPort ?= 'port'. This is defined here.
  ConjugatedInterfaceEndMember = DefinitionMemberPrefix
    (["abstract"]? "end" ["port"]? ConjugatedPortUsage);
    //isPort ?= 'end' is in Xtext, which is most likely an error and should be isPort ?= 'port'. This is defined here.

}
