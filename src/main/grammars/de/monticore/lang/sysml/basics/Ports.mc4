/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;

component grammar Ports extends de.monticore.lang.sysml.basics.SysMLCommonBasis,
  de.monticore.lang.sysml.basics.Usages,
  de.monticore.lang.sysml.basics.Associations //TODO try to avoid circular dependencies
  {

  /* PORT DEFINITIONS */

  PortDefinitionStd implements PortDefinition, PackagedDefinitionMember  = PortDeclaration DefinitionBody;
  PortDeclaration = ["abstract"]? "port" "def" ClassifierDeclarationCompletion ConjugatedPortDefinitionMember*;
  ConjugatedPortDefinition = PortConjugation+;
  PortConjugation = EmptyNT; //TODO {SysML::PortConjugation}

  /* PORT DEFINITION MEMBERSHIPS */
  ConjugatedPortDefinitionMember = ConjugatedPortDefinition;

  /* PORT USAGE */

  PortUsageStd implements PortUsage = Usage;
  ConjugatedPortUsageStd implements ConjugatedPortUsage= ConjugatePortUsageDeclaration UsageCompletion;
  ConjugatePortUsageDeclaration =
    ( name:SysMLName? ConjugatePortTypePart MultiplicityPart? SubsettingPart)
    | (RedefinesKeyword ownedRelationship_comp:Redefinition ConjugatePortTypePart
    MultiplicityPart SubsettingPart);
  ConjugatePortTypePart = TypedByKeyword "~" ConjugatedPortTyping; //TypedByKeyword is defined in Usages
  ConjugatedPortTyping = SysMLName; // Remark: [SysML::PortDefinition | QualifiedName]

  /* Connectors */
  Connector = ConnectionPart AssociationBlockBody;
  ConnectionUsage = UsageDeclaration "connect" ConnectionPart AssociationBlockBody;
  ConnectionPart =  ownedFeatureMembership_compFrom:ConnectorEndMember "to"
      ownedFeatureMembership_compTo:ConnectorEndMember
      | ( "(" ( ConnectorEndMember || ",")+ ")");
      //TODO coco should be >2 TODO ownedFeatureMembership_comp:ConnectorEndMember

  ConnectorEnd = Subset+ MultiplicityMember?;

  MultiplicitySourceEnd = SysMLName MultiplicityMember;
  EmptySourceEnd = SysMLName;
  EmptyTargetEnd = SysMLName;

  /*MultiplicitySourceEnd returns SysML::Feature :
  	{SysML::SourceEnd} (  ownedFeatureMembership_comp += MultiplicityMember )?
  ;

  EmptySourceEnd returns SysML::Feature :
  	{SysML::SourceEnd}
  ;

  EmptyTargetEnd returns SysML::Feature :
  	{SysML::TargetEnd}
  ;*/ //TODO
  /* CONNECTOR MEMBERSHIPS */
  ConnectorEndMember = (memberName:SysMLName "=>" )? ConnectorEnd;
  MultiplicitySourceEndMember = MultiplicitySourceEnd;
  EmptySourceEndMember = EmptySourceEnd;
  EmptyTargetEndMember = EmptyTargetEnd;



  /* INTERFACE CONNECTORS */   //TODO Own File
  InterfaceUsage = UsageDeclaration "connect" ConnectionPart InterfaceBody;


  /* BINDING CONNECTORS */
  BindingConnector = ((name:SysMLName)? TypePart? "as")? //Make own NT
    ConnectorEndMember+ "=" ConnectorEndMember+ DefinitionBody;

  /* INTERFACE DEFINITIONS */
  InterfaceDefinitionUnit implements Unit = UnitPrefix InterfaceDefinition;
  InterfaceDefinition implements PackagedDefinitionMember = InterfaceDeclaration InterfaceBody;
  InterfaceDeclaration = ["abstract"]? "interface" "def" ClassifierDeclarationCompletion;
  InterfaceBody = ";" | (
     "{"
      (NestedDefinitionMember+ | InterfaceUsageMember+ | ImportUnit)*
     "}"
    );

  /* INTERFACE DEFINITION MEMBERSHIPS */

  InterfaceUsageMember = NestedUsageMember | InterfaceEndMember | ConjugatedInterfaceEndMember ;
  InterfaceEndMember = DefinitionMemberPrefix
    ( ["abstract"]? ["end"]? ["port"]? PortUsage);//TODO  isPort:["end"]?

  ConjugatedInterfaceEndMember = DefinitionMemberPrefix
    (["abstract"]? ["end"]? ["port"]? ConjugatedPortUsage);//TODO  isPort:["end"]?


}

