/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;

component grammar SysMLExpressions extends de.monticore.lang.sysml.basics.SysMLShared,
  de.monticore.lang.sysml.basics.SysMLNamesBasis,
  de.monticore.lang.sysml.basics.SysMLExpressionsBasis {

  NullCoalescingExpression implements Expression <110> = ifNotNull:Expression "??" ifNullReturn:Expression;

  ClassificationExpression  implements Expression <240> = Expression ("instanceof"| "hastype") Expression;

  PowersetExpression implements Expression <180> = left:Expression operator:"**" right:Expression;

  UnitsExpression implements Expression <219> =  Expression "@"  "[" Expression "]";

  //TODO: Check usage with SysMLv2 Standard
  SequenceAccessExpression implements Expression <300> = Expression "[" Expression+ "]";
  PrimaryExpression implements Expression <300> = Expression PrimaryExpressionPart+;
  PrimaryExpressionPart = "->" SysMLName BodyMember+;
  BodyExpression =
    ( BodyParameterMember+ ( BodyParameterMember )* "(" ExpressionMember* ")" ) | ExpressionTyping+;

  //TODO: Use this to replace MCType?
  ExpressionTyping = type:QualifiedName;

  // Base Expressions

  //TODO: Why do we need this?
  BaseExpression implements Expression <300> =
     NullExpression
    	| LiteralExpression
    	| FeatureReferenceExpression
    	| InvocationExpression
    	| ClassExtentExpression
    	| SequenceConstructionExpression
    	| "(" Expression ")"
    ;

  //TODO: Check usage with SysMLv2 Standard
  FeatureReferenceExpression = FeatureReference+;
  InvocationExpression = FeatureTyping "(" Tuple ")";
  Tuple = PositionalTuple | NamedTuple;
  PositionalTuple = ( ExpressionMember || ",")+;
  NamedTuple = ( NamedExpressionMember || ",")+;
  ClassExtentExpression = TypeReferenceMember+ "." "allInstances" "(" ")";
  TypeReference = FeatureTyping;
  SequenceConstructionExpression = "{" "}" |
    "{" FromToDigitsDotDot Expression "}" |
    "{" Expression ("," SequenceElementList)? "}";

  SequenceElementList = Expression ("," SequenceElementList)?;

  //TODO: NullLiteral?
  NullExpression = "null";

  /* EXPRESSION MEMBERSHIPS */

  ExpressionMemberStd implements ExpressionMember = Expression;

  //TODO: Remove duplicate to ExpressionTyping
  FeatureReference = memberFeature:QualifiedName;
  TypeReferenceMember = TypeReference;
  NamedExpressionMember = memberName:SysMLName "=>" Expression;
  BodyMember = BodyExpression;
  BodyParameterMember = memberName:SysMLName Parameter;

  //TODO: Check usage with SysMLv2 Standard
  /* QUERY PATH EXPRESSIONS */

  SysMLQueryPathExpression implements Expression <50> =
    	QueryHeadExpression
    	( "[" firstBodyMember:BodyMember "]" )?
    	SysMLQueryPathExpressionPart*;
  SysMLQueryPathExpressionPart = "/" QueryNameExpression	( "[" BodyMember "]" )?;
  QueryNameExpression = FeatureReference+;
  QueryHeadExpression = "./" FeatureReference+;

}
