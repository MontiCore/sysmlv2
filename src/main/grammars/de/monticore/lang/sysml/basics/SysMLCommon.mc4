/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;


component grammar SysMLCommon extends de.monticore.lang.sysml.basics.Classifiers,
  de.monticore.lang.sysml.basics.ValueTypes,
  de.monticore.lang.sysml.basics.Usages,
  de.monticore.lang.sysml.basics.Ports,
  de.monticore.lang.sysml.basics.Associations,
  de.monticore.lang.sysml.basics.SysMLCommonBasis
   {



  //TODO put this in a DefinitionFile
  DefinitionBodyStd implements DefinitionBody = "{" (NestedDefinitionMember+ | NestedUsageMember+ | ImportUnit+)* "}";
  DefinitionBodyEmpty implements DefinitionBody = ";";

  AbstractDefinitionBody = DefinitionBody; //TODO Remark: only has different naming, see Xtext 238

  NestedDefinitionMemberStd implements NestedDefinitionMember = DefinitionMemberPrefix PackagedDefinitionMember;

  DefinitionMemberPrefixStd implements DefinitionMemberPrefix = PrefixAnnotation* visibility:VisibilityIndicator?;
  /*Remark: in Xtext 	( ownedRelationship_comp += PrefixAnnotation )*, what is basically a List, which should not be
  empty, but also can be empty. More elegant with *   */


 /* DEFINITION MEMBERSHIPS */
  NestedDefinitionMember = DefinitionMemberPrefix PackagedDefinitionMember;
  NestedUsageMember = StructureUsageMember | BehaviorUsageMember;
  StructureUsageMember = NonPortStructureUsageMember | PortMember | ConjugatedPortMember;
  /*
   * NonPortStructureUsageMember, BehaviorUsageMember are interfaces
   */
  PortMember = DefinitionMemberPrefix (["abstract"] ["port"]? PortUsage); //Remark we do not use abstract Port Usage
  ConjugatedPortMember = DefinitionMemberPrefix (["abstract"] ["port"]? ConjugatedPortMember);

  FeatureDirection =  ["in"] | ["out"] | ["inout"];

  DefinitionMemberPrefix = PrefixAnnotation* visibility:VisibilityIndicator?;


   /* EXPRESSION MEMBERSHIPS */ //TODO maybe interfaces
      ExpressionMember = Expression;
      FeatureReferece = QualifiedName; //TODO see xtext
      TypeReferenceMember = TypeReference;
      NamedExpressionMember = memberName:SysMLName "=>" Expression;
      BodyMember = BodyExpression;
      BodyParameterMember = memberName:SysMLName Parameter;
      //TODO more...
}