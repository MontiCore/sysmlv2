/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;


component grammar SysMLCommon extends de.monticore.lang.sysml.basics.Classifiers,
  //de.monticore.lang.sysml.basics.ValueTypes, Transitively through Usages
  de.monticore.lang.sysml.basics.Usages,
  de.monticore.lang.sysml.basics.Ports,
  de.monticore.lang.sysml.basics.Associations,
  de.monticore.lang.sysml.basics.SysMLCommonBasis
   {




  //TODO put this in a DefinitionFile
  /* DEFINITIONS */

  DefinitionBodyStd implements DefinitionBody = "{" (NestedDefinitionMember+ | NestedUsageMember+ | ImportUnit+)* "}";
  DefinitionBodyEmpty implements DefinitionBody = ";";

  AbstractDefinitionBody = DefinitionBody; //TODO Remark: only has different naming, see Xtext 238

  /* DEFINITION MEMBERSHIPS */

  NestedDefinitionMemberStd implements NestedDefinitionMember = "RemoveMe";
  NestedUsageMemberStd implements NestedUsageMember = StructureUsageMember | BehaviorUsageMember;
  StructureUsageMember = NonPortStructureUsageMember | PortMember | ConjugatedPortMember;
  // Remark: NonPortStructureUsageMember is an interface
  // Remark: BehaviorUsageMember is an interface
  PortMember = DefinitionMemberPrefix (["abstract"] ["port"]? PortUsage); //Remark we do not use abstract Port Usage
  ConjugatedPortMember = DefinitionMemberPrefix (["abstract"] ["port"]? ConjugatedPortMember);
  FeatureDirection =  ["in"] | ["out"] | ["inout"];
  DefinitionMemberPrefixStd implements DefinitionMemberPrefix = PrefixAnnotation* visibility:VisibilityIndicator?;


  //NestedDefinitionMemberStd implements NestedDefinitionMember = DefinitionMemberPrefix PackagedDefinitionMember;

  //DefinitionMemberPrefixStd implements DefinitionMemberPrefix = PrefixAnnotation* visibility:VisibilityIndicator?;
  /*Remark: in Xtext 	( ownedRelationship_comp += PrefixAnnotation )*, what is basically a List, which should not be
  empty, but also can be empty. More elegant with *   */



}