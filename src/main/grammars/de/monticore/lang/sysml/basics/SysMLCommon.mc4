/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;


component grammar SysMLCommon extends de.monticore.lang.sysml.basics.Classifiers,
  //de.monticore.lang.sysml.basics.ValueTypes, Transitively through Usages
  de.monticore.lang.sysml.basics.Usages,
  de.monticore.lang.sysml.basics.Ports,
  de.monticore.lang.sysml.basics.Associations,
  de.monticore.lang.sysml.basics.ValueTypes,
  de.monticore.lang.sysml.basics.SysMLCommonBasis
   {
  //TODO put this in a DefinitionFile?
  /* DEFINITIONS */

  DefinitionBodyStd implements DefinitionBody = "{" (NestedDefinitionMember | NestedUsageMember | ImportUnit)* "}";
  DefinitionBodyEmpty implements DefinitionBody = ";";

  AbstractDefinitionBody = DefinitionBody; //TODO Remark: only has different naming, see Xtext 238

  /* DEFINITION MEMBERSHIPS */

  NestedDefinitionMemberStd implements NestedDefinitionMember = DefinitionMemberPrefix PackagedDefinitionMember;
  NestedUsageMemberStd implements NestedUsageMember = StructureUsageMember | BehaviorUsageMember;
  StructureUsageMember = (DefinitionMemberPrefix NonPortStructureUsageMember) | PortMember | ConjugatedPortMember;
  // Remark: in Xtext DefinitionMemberPrefix is a part of NonPortStructureUsageMember
  // Remark: NonPortStructureUsageMember is an interface
  // Remark: BehaviorUsageMember is an interface
  PortMember = DefinitionMemberPrefix (["abstract"]? "port" PortUsage); //Remark we do not use abstract Port Usage
  //TODO look into port is optional
  ConjugatedPortMember = DefinitionMemberPrefix (["abstract"]? "port" ConjugatedPortUsage);
  FeatureDirection =  ["in"] | ["out"] | ["inout"];
  DefinitionMemberPrefixStd implements DefinitionMemberPrefix = PrefixAnnotation* visibility:VisibilityIndicator?;



  /* The following are some definitions, which are used by more than one diagram.
   * In Xtext they are actually defined somewhere under the following headlines.
   */
  /* STATE DEFINITIONS */
  EmptyActionUsage;
  interface PerformedActionUsage;

  /* ACTIVITIES */
  interface ParameterList;
  interface ActivityBody;

  SysMLNameAndTypePartOptional = (name:SysMLName TypePart?)?;

  interface ActivityBodyItem;
  interface ActionParameterList;
  ActionUsageDeclaration = (name:SysMLName TypePart? ActionParameterList? SubsettingPart ValuePart?) //TODO rename? used by states and Actions
      | (TypePart? ActionParameterList? ValuePart?)
      | (RedefinesKeyword Redefinition TypePart ActionParameterList? ValuePart?);

 /* ITEM FLOWS */ //Is this AD and IBD?
  ItemFlow = ItemFlowDeclaration DefinitionBody;
  SuccessionItemFlow = ItemFlowDeclaration DefinitionBody;
  ItemFlowDeclaration = ( (name:SysMLName)? TypePart?
    (( "of" ItemFeatureMember) | (EmptyItemFeatureMember))
    "from" | EmptyItemFeatureMember )
    ItemFlowEndMember "to" ItemFlowEndMember;
  ItemFeatureTyping = FeatureTyping MultiplicityMember?;
  EmptyItemFeature;
  ItemFlowEnd = ItemFlowFeatureMember;
  ItemFlowFeature = Redefinition;

  /* ITEM FLOW MEMBERSHIPS */
  ItemFeatureMember = (memberName:SysMLName TypedByKeyword)? ItemFeatureTyping;
  ItemFlowEndMember = ItemFlowEnd;
  ItemFlowFeatureMember = ItemFlowFeature;
  EmptyItemFeatureMember = EmptyItemFeature;


  /* SUCCESSIONS */
  Succession = SuccessionDeclaration ";";
  SuccessionDeclaration = ( ( name:SysMLName)? TypePart? "first" )? ConnectorEndMember "then" ConnectorEndMember;
  TargetSuccession = "then" MultiplicitySourceEndMember ConnectorEndMember;
  EmptySuccession =  "then" MultiplicitySourceEndMember EmptyTargetEndMember;
  GuardedSuccession = "succession" (( name:SysMLName)? TypePart? "first")?
  TransitionSourceMember GuardExpressionMember "then" TransitionSuccessionMember;
  GuardedTargetSuccession = GuardExpressionMember  "then" TransitionSuccessionMember;
  DefaultTargetSuccession = "else" TransitionSuccessionMember;

 /* TRANSITIONS */
  TransitionStep = "transition" (SysMLNameAndTypePartOptional "first")? TransitionSourceMember
    TriggerStepMember? GuardExpressionMember? EffectBehaviorMember? "then" TransitionSuccessionMember;
  TargetTransitionStep = TriggerStepMember? GuardExpressionMember? EffectBehaviorMember? "then"
  TransitionSuccessionMember;
  TriggerStep = EmptyParameterMember ItemFeatureMember;
  EffectBehaviourUsage = EmptyActionUsage | PerformedActionUsage ( "{" ActivityBodyItem* "}" )?;
  TransitionSuccession = EmptySourceEndMember ConnectorEndMember;

  /* TRANSITION MEMBERSHIPS */
  TransitionSourceMember = memberFeature:QualifiedName;
  TransitionSuccessionMember = TransitionSuccession;
  //TODO add abstraction layer?
  TriggerStepMember = kind:TriggerFeatureKind TriggerStep;
  TriggerFeatureKind = kind:"accept"; //Remark: this is an enum in xtext
  GuardExpressionMember = kind:GuardFeatureKind Expression;
  GuardFeatureKind = guard:"if"; //Remark: this is an enum in xtext
  EffectBehaviorMember = kind: EffectFeatureKind EffectBehaviourUsage;
  EffectFeatureKind = effect:"do"; //Remark: this is an enum in xtext


  EmptyParameter;
  EmptyParameterMember = EmptyParameter;
}
