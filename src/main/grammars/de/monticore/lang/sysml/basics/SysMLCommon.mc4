/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;


component grammar SysMLCommon extends de.monticore.lang.sysml.basics.Classifiers,
  //de.monticore.lang.sysml.basics.ValueTypes, Transitively through Usages
  de.monticore.lang.sysml.basics.Usages,
  de.monticore.lang.sysml.basics.Ports,
  de.monticore.lang.sysml.basics.Associations,
  de.monticore.lang.sysml.basics.ValueTypes,
  de.monticore.lang.sysml.basics.SysMLCommonBasis
   {
  //TODO put this in a DefinitionFile?
  /* DEFINITIONS */

  DefinitionBodyStd implements DefinitionBody = "{" (NestedDefinitionMember | NestedUsageMember | ImportUnit)* "}";
  DefinitionBodyEmpty implements DefinitionBody = ";";

  AbstractDefinitionBody = DefinitionBody; //TODO Remark: only has different naming, see Xtext 238

  /* DEFINITION MEMBERSHIPS */

  NestedDefinitionMemberStd implements NestedDefinitionMember = DefinitionMemberPrefix PackagedDefinitionMember;
  NestedUsageMemberStd implements NestedUsageMember = StructureUsageMember | BehaviorUsageMember;
  StructureUsageMember = (DefinitionMemberPrefix NonPortStructureUsageMember) | PortMember | ConjugatedPortMember;
  // Remark: in Xtext DefinitionMemberPrefix is a part of NonPortStructureUsageMember
  // Remark: NonPortStructureUsageMember is an interface
  // Remark: BehaviorUsageMember is an interface
  PortMember = DefinitionMemberPrefix (["abstract"]? "port" PortUsage); //Remark we do not use abstract Port Usage
  //TODO look into port is optional
  ConjugatedPortMember = DefinitionMemberPrefix (["abstract"]? "port" ConjugatedPortUsage);
  FeatureDirection =  ["in"] | ["out"] | ["inout"];
  DefinitionMemberPrefixStd implements DefinitionMemberPrefix = PrefixAnnotation* visibility:VisibilityIndicator?;



  /* The following are some definitions, which are used by more than one diagram.
   * In Xtext they are actually defined somewhere under the following headlines.
   */
   /* STATE DEFINITIONS */
   EmptyActionUsage;
   interface PerformedActionUsage;

   /* ACTIVITIES */
   interface ParameterList;
   interface ActivityBody;
}