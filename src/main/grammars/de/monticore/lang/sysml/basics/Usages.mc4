/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;


component grammar Usages extends de.monticore.lang.sysml.basics.SysMLCommonBasis{
   UsageStd implements Usage =
     SiMUsageDeclaration UsageCompletion;

   SiMUsageDeclaration = (SysMLName TypePart? SubsettingPart)
    | (TypePart  SubsettingPart)
    | (RedefinesKeyword Redefinition TypePart? SubsettingPart);

    UsageCompletion = DefinitionBody;
    //UsageCompletion = ValuePart? DefinitionBody; TODO add ValuePart, if FeatureValue is fixed.

    ValuePart = FeatureValue+;
    FeatureValue = Expression; //TODO expressions cannot be used like this, because else something like
    //TODO value mass : Real asd; (<--asd is problematic) is possible.
    TypePart = (TypedByKeyword ((FeatureTyping || ",")+ | "any") MultiplicityPart? )
      | MultiplicityPart;
    TypedByKeyword = ":" | "typed" "by";
    /*FeatureTyping returns SysML::FeatureTyping :
      	type = [SysML::Type | QualifiedName]
      ; TODO reference in MontiCore with @ and test this.*/
    FeatureTyping = QualifiedName;

    //TODO enable any order ( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )
    MultiplicityPart = MultiplicityMember (["ordered"] | ["nonunique"])*; //Ast RUles TODO only once


    //Multiplicity = "[" ( NaturalLiteralMember "..")? UnlimitedNaturalLiteralMember "]";
    //Multiplicity = "[" ( NaturalLiteralMember "..")? (SysMLNatNumber "..")? UnlimitedNaturalLiteralMember "]";
    //Multiplicity = "[" ((NaturalLiteralMember "..")? UnlimitedNaturalLiteralMember) "]";
    Multiplicity = "[" ((FromToDigitsDotDot)? UnlimitedNaturalLiteralMember) "]";
    //token SysMLNatNumber = Digits;
    token FromToDigitsDotDot = ('0'..'9')+ ".."; //TODO is this clean? //TODO noSpace(2) "." "." command

    SubsettingPart = ((Subsets ||",")+ | (Redefines || ",")+)*;

    Subsets = SubsetsKeyword Subset+;
    SubsetsKeyword = ":>" | "subsets";
    Subset = QualifiedName; //TODO @SysML::Feature

    Redefines = RedefinesKeyword Redefinition+;
    RedefinesKeyword = ":>>" | "redefines";
    Redefinition = QualifiedName; //TODO @SysML::Feature

    //Usage Memberships
    MultiplicityMember = Multiplicity;

    //Remark: literal type is enforced by CoCo TODO write CoCo
    //TODO unlimitedNat -> map this how?
    NaturalLiteralMember = naturalLiteralExpression:Literal;
    UnlimitedNaturalLiteralMember = unlimitedNaturalLiteralExpression:Literal | isUnlimited:["*"];
}
