/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;


component grammar Usages extends de.monticore.lang.sysml.basics.SysMLCommonBasis
   { //TODO make interface for NatLiteral

  /* USAGES */
  UsageStd implements Usage =
     UsageDeclaration UsageCompletion;

  UsageDeclaration = (SysMLName TypePart? SubsettingPart)
    | (TypePart  SubsettingPart)
    | (RedefinesKeyword Redefinition TypePart? SubsettingPart); //SubsettingPart itself is optional

  UsageCompletion = ValuePart? DefinitionBody;

  ValuePart = "=" FeatureValue;
  FeatureValue = Expression;
  //TODO value mass : Real asd; (<--asd is problematic) is possible. => Restrict Expressions => Restricted FeatureValue [from + to unique], maybe it is fine now?
  TypePart = (TypedByKeyword ((FeatureTyping || ",")+ | "any") MultiplicityPart? )
    | MultiplicityPart;
  TypedByKeyword = ":" | "typed" "by";
  FeatureTypingStd implements FeatureTyping = QualifiedName; //@SysML::Type TODO
  MultiplicityPart = MultiplicityMember (["ordered"] | ["nonunique"])*; //Ast RUles TODO only once, not allowed: "ordered ordered"

  //TODO

  Multiplicity = "[" ((FromToDigitsDotDot)? UnlimitedNaturalLiteralMember) "]";
  //token FromToDigitsDotDot = ('0'..'9')+ ".."; //TODO noSpace(2) "." "." command This is in CommonBasis now.
  //Multiplicity = "[" ((UnlimitedNaturalLiteralMember DotDot)? UnlimitedNaturalLiteralMember) "]";
  //token DotDot = "..";
  //Multiplicity = "[" ( (UnlimitedNaturalLiteralMember DotDot)? UnlimitedNaturalLiteralMember) "]";
  //TODO token DotDot = '.' '.';
  //token MultiplicityDigits = ('0'..'9')+;
  //Multiplicity = "[" ( (MultiplicityDigits  "." {noSpace()}? "." {noSpace()}?)? UnlimitedNaturalLiteralMember {noSpace()}? ) "]";
  //token MultiplicityDigits = ('0'..'9')+;
  //Multiplicity = "[" ( (MultiplicityDigits  "." "." {noSpace()}?)? UnlimitedNaturalLiteralMember) "]";
  //Multiplicity = "[" ( (NaturalLiteralMember  "." "." {noSpace()}? )? UnlimitedNaturalLiteralMember) "]";

  //token MultiplicityDigits = ('0'..'9')+;


  SubsettingPart = (Subsets ("," Subset)* | Redefines  ("," Redefinition)*)*;

  Subsets = SubsetsKeyword Subset;
  SubsetsKeyword = ":>" | "subsets";
  Subset = QualifiedName; //TODO @SysML::Feature

  Redefines = RedefinesKeyword Redefinition+;
  RedefinesKeyword = ":>>" | "redefines";
  Redefinition = QualifiedName; //TODO @SysML::Feature

  //Usage Memberships
  MultiplicityMember = Multiplicity;

  //Remark: literal type is enforced by CoCo (write CoCo) or by Exact Literal TODO
  //TODO unlimitedNat -> map this how?
  //NaturalLiteralMember = naturalLiteralExpression:NatLiteral ;
  UnlimitedNaturalLiteralMember = unlimitedNaturalLiteralExpression:Literal | isUnlimited:["*"];




  /* PARAMETERS */ //TODO decide FILE

  ParameterStd implements Parameter = ParameterTypePart?;
  ParameterTypePart = (TypedByKeyword (FeatureTyping | "any" ) MultiplicityPart? )
    | (MultiplicityPart) ;


  //TODO later decide to put Individuals in own FILE
  /* INDIVIDUAL DEFINITIONS */
  IndividualDefinitionUnit implements Unit = UnitPrefix IndividualDefinition;
  IndividualDefinition implements PackagedDefinitionMember = IndividualDefDeclaration DefinitionBody;
  IndividualDefDeclaration = ["abstract"]? "individual" "def" ClassifierDeclarationCompletion
    LifeClassMembership;
  LifeClass;

  /* INDIVIDUAL DEFINITION MEMBERSHIPS */
  LifeClassMembership = LifeClass;


  /* INDIVIDUALS */

  IndividualUsage = Usage;
  TimeSliceUsage = UsageDeclaration TimeSliceFeatureMember UsageCompletion;
  TimeSliceFeature;
  SnapshotUsage = UsageDeclaration SnapshotFeatureMember UsageCompletion;
  SnapshotFeature;

  IndividualUsagePackagedUsageMember implements PackagedUsageMember =  ["abstract"]? "individual" IndividualUsage;
  TimeSliceUsagePackagedUsageMember implements PackagedUsageMember =   ["abstract"]? "timeslice" TimeSliceUsage;
  SnapshotUsagePackagedUsageMember implements PackagedUsageMember =    ["abstract"]? "snapshot" SnapshotUsage;

  /* INDIVIDUAL MEMBERSHIPS */

  TimeSliceFeatureMember = TimeSliceFeature;
  SnapshotFeatureMember = SnapshotFeature;
}
