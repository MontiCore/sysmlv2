/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics;


component grammar Usages extends de.monticore.lang.sysml.basics.SysMLCommonBasis {

  /* USAGES */
  UsageStd implements Usage =
     UsageDeclaration UsageCompletion;

  UsageDeclaration = (SysMLName TypePart? SubsettingPart)
    | (TypePart  SubsettingPart)
    | (RedefinesKeyword Redefinition TypePart? SubsettingPart); //SubsettingPart itself is optional

  UsageCompletion = ValuePart? DefinitionBody;

  ValuePart = "=" FeatureValue;
  FeatureValue = Expression;
  //TODO value mass : Real asd; (<--asd is problematic) is possible. => Restrict Expressions => Restricted FeatureValue [from + to unique], maybe it is fine now?
  TypePart = (TypedByKeyword ((FeatureTyping || ",")+ | "any") MultiplicityPart? )
    | MultiplicityPart;
  TypedByKeyword = ":" | "typed" "by";
  FeatureTypingStd implements FeatureTyping = QualifiedName; //@SysML::Type TODO
  MultiplicityPart = MultiplicityMember (["ordered"] | ["nonunique"])*; //Ast RUles TODO only once, not allowed: "ordered ordered"



  Multiplicity = "[" ((FromToDigitsDotDot)? UnlimitedNaturalLiteralMember) "]";
  //TODO delete if solution is accepted
  //Multiplicity = "[" ((UnlimitedNaturalLiteralMember DotDot)? UnlimitedNaturalLiteralMember) "]";
  //token DotDot = "..";
  //Multiplicity = "[" ( (UnlimitedNaturalLiteralMember DotDot)? UnlimitedNaturalLiteralMember) "]";
  //token DotDot = '.' '.';
  //token MultiplicityDigits = ('0'..'9')+;
  //Multiplicity = "[" ( (MultiplicityDigits  "." {noSpace()}? "." {noSpace()}?)? UnlimitedNaturalLiteralMember {noSpace()}? ) "]";
  //token MultiplicityDigits = ('0'..'9')+;
  //Multiplicity = "[" ( (MultiplicityDigits  "." "." {noSpace()}?)? UnlimitedNaturalLiteralMember) "]";
  //Multiplicity = "[" ( (NaturalLiteralMember  "." "." {noSpace()}? )? UnlimitedNaturalLiteralMember) "]";

  //token MultiplicityDigits = ('0'..'9')+;


  SubsettingPart = (Subsets ("," Subset)* | Redefines  ("," Redefinition)*)*;

  Subsets = SubsetsKeyword Subset;
  SubsetsKeyword = ":>" | "subsets";
  Subset = QualifiedName;

  Redefines = RedefinesKeyword Redefinition+;
  RedefinesKeyword = ":>>" | "redefines";
  Redefinition = QualifiedName;

  //Usage Memberships
  MultiplicityMember = Multiplicity;

  //Remark: literal type is enforced by CoCo (write CoCo) or by Exact Literal TODO
  UnlimitedNaturalLiteralMember = unlimitedNaturalLiteralExpression:Literal | isUnlimited:["*"];




  /* PARAMETERS */

  ParameterStd implements Parameter = ParameterTypePart?;
  ParameterTypePart = (TypedByKeyword (FeatureTyping | "any" ) MultiplicityPart? )
    | (MultiplicityPart) ;

}
