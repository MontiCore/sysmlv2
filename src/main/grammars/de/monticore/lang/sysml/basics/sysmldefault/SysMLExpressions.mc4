/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.basics.sysmldefault;

component grammar SysMLExpressions extends de.monticore.expressions.CommonExpressions,
  de.monticore.lang.sysml.basics.interfaces.SysMLShared,
  de.monticore.lang.sysml.basics.interfaces.SysMLNamesBasis,
  de.monticore.lang.sysml.basics.interfaces.SysMLExpressionsBasis {

  /* EXPRESSIONS */
  /*
   * We import CommonExpressions, but we also wanted to make clear how the Expressions of SysML map to the Expressions
   * of CommonExpressions. That is why we comment out the Expressions of SysML and provide the name of the
   * corresponding Expression in CommonExpressions.
   */
  /*SysMLConditionalExpression implements Expression =
      condition:Expression (
    		"?" doOnTrue:Expression+ ":" doOnFalse:Expression+
    	);*/
    	//ConditionalExpression
  NullCoalescingExpression implements Expression <120> = left:Expression "??" right:Expression;
  // ConditionalOrExpression implements Expression = Expression  ( "||" Expression);
    // covered in CommonExpressions ->  BooleanOrOpExpression
  // ConditionalAndExpression implements Expression = left:Expression "&&" right:Expression;
    // covered in CommonExpressions -> BooleanOrOpExpression
  OrExpression implements Expression <119> = left:Expression "|" right:Expression;
  XorExpression implements Expression <118> = left:Expression "^" right:Expression;
  AndExpression implements Expression <120> = left:Expression "&" right:Expression;
  //EqualityExpression implements Expression = Expression ((equal:["=="] | notEqual:["!="]) Expression);
    // covered in CommonExpressions ->  EqualsExpression, NotEqualsExpression
  ClassificationExpression  implements Expression <240> = Expression ("instanceof"| "hastype") Expression;
  //RelationalExpression implements Expression = Expression RelationalOperator Expression;
  //RelationalOperator = "<" | ">" | "<=" | ">=";
    // covered in CommonExpressions -> LessEqualExpression, GreaterEqualExpression, LessThanExpression, GreaterThanExpression
  //AdditiveExpression implements Expression =  Expression (plus:["+"]|minus:["-"]) Expression;
    // covered in CommonExpressions -> PlusExpression, MinusExpression
  MultiplicativeExpression implements Expression <220> =
    left:Expression (times:["*"]|divide:["/"]|exp:["**"]) right:Expression;
  UnitsExpression implements Expression <219> =  Expression "@"  "[" Expression "]";
  UnaryExpression implements Expression <171> =  (plus:"+"|minus:"-"| not:"!" | tilde:"~") Expression;
  SequenceAccessExpression implements Expression <300> = Expression "[" Expression+ "]";
  PrimaryExpression implements Expression <300> = Expression PrimaryExpressionPart+;
  PrimaryExpressionPart = "->" SysMLName BodyMember+;
  BodyExpression =
    ( BodyParameterMember+ ( BodyParameterMember )* "(" ExpressionMember* ")" ) | ExpressionTyping+;
  ExpressionTyping = type:QualifiedName;


  // Base Expressions
  BaseExpression implements Expression <300> =
     NullExpression
    	| LiteralExpression
    	| FeatureReferenceExpression
    	| InvocationExpression
    	| ClassExtentExpression
    	| SequenceConstructionExpression
    	| "(" Expression ")"
    ;

  FeatureReferenceExpression = FeatureReference+;
  InvocationExpression = FeatureTyping "(" Tuple ")";
  Tuple = PositionalTuple | NamedTuple;
  PositionalTuple = ( ExpressionMember || ",")+;
  NamedTuple = ( NamedExpressionMember || ",")+;
  ClassExtentExpression = TypeReferenceMember+ "." "allInstances" "(" ")";
  TypeReference = FeatureTyping;
  SequenceConstructionExpression = "{" "}" |
    "{" FromToDigitsDotDot Expression "}" |
    "{" Expression ("," SequenceElementList)? "}";

  SequenceElementList = Expression ("," SequenceElementList)?;
  NullExpression = "null";


  /* EXPRESSION MEMBERSHIPS */

  ExpressionMemberStd implements ExpressionMember = Expression;
  FeatureReference = memberFeature:QualifiedName;
  TypeReferenceMember = TypeReference;
  NamedExpressionMember = memberName:SysMLName "=>" Expression;
  BodyMember = BodyExpression;
  BodyParameterMember = memberName:SysMLName Parameter;

  /* QUERY PATH EXPRESSIONS */
  SysMLQueryPathExpression implements Expression <299> =
    	QueryHeadExpression
    	( "[" firstBodyMember:BodyMember "]" )?
    	SysMLQueryPathExpressionPart*;
  SysMLQueryPathExpressionPart = "/"  QueryNameExpression	( "[" BodyMember "]" )?;
  QueryNameExpression = FeatureReference+;
  QueryHeadExpression = "./" FeatureReference+;

}
