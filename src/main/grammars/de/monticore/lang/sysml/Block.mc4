/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml;


grammar Block extends de.monticore.lang.sysml.SysMLBasics {

 //TODO why name so much ownedMembership_comp or  ownedFeatureMembership_comp

  start BlockUnit;

  BlockUnit = UnitPrefix BlockDeclaration DefinitionBody; //TODO xtext: blockUnit (with prefix) and block is duplicated

  UnitPrefix = "prefix";

  BlockDeclaration=  ["abstract"]? "block" ClassifierDeclarationCompletion;

  //TODO SuperclassingList could be basic
  ClassifierDeclarationCompletion = Name SuperclassingList?;

  //TODO 341 =+ does not make sense, why not just use = ???
  //TODO SpecializesKeyword ownedRelationship_comp += Superclassing ( ',' ownedRelationship_comp += Superclassing )*
  SuperclassingList = SpecializesKeyword (Superclassing || ",")+;

  SpecializesKeyword = ":>" | "specializes";

  //TODO Classifier is not defined in Xtext
  Superclassing = Classifier | SysMLQualifiedName;


  Classifier= "TODO implement me";

  //TODO is definitely basics, //TODO Name is maybe other than MontiCore Basics //TODO check basics
  //SysMLQualified = "Hi";
  SysMLQualifiedName = Name | ColonQualifiedName | DotQualifiedName;
  ColonQualifiedName = Name("." Name)+; //TODO how to link this in the AST to the object?
  DotQualifiedName = Name ("::" Name)+; //TODO how to link this in the AST to the object?


  //Definitions
  DefinitionBody =
  hasNoBody:";"
  	| "{" (
  		  NestedDefinitionMember+
  		| NestedUsageMember+
  		| Import+
  	)* "}";

  /* Definition Memberships */

 //NestedDefinitionMember= DefinitionMemberPrefix PackagedDefinitionMember
 NestedDefinitionMember = "NestedDefinitionMember TODO implement me";
 NestedUsageMember = "NestedUsageMember TODO implement me";
 Import = "Import TODO implement me";
}