/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sysml.advanced;


component grammar SysMLSuccessions extends de.monticore.lang.sysml.advanced.SysMLItemFlows {

  /* SUCCESSIONS */
  NonPortStructureUsageMemberSuccession implements NonPortStructureUsageMember =
    ["abstract"]? "succession" Succession;

  Succession = SuccessionDeclaration ";";
  SuccessionDeclaration implements SysMLType =
   ( SysMLName? TypePart? "first" )? ConnectorEndMember "then" ConnectorEndMember;
  astrule SuccessionDeclaration =
    method public String getName(){
      if( this.isPresentSysMLName()){
        return this.getSysMLName().getName();
      }
      return "";
    }
  ;
  TargetSuccession = "then" MultiplicitySourceEndMember ConnectorEndMember;
  EmptySuccession =  "then" MultiplicitySourceEndMember EmptyTargetEndMember;
  GuardedSuccession implements SysMLType = "succession" (SysMLName? TypePart? "first")?
    TransitionSourceMember GuardExpressionMember "then" TransitionSuccessionMember;
  astrule GuardedSuccession =
    method public String getName(){
      if( this.isPresentSysMLName()){
        return this.getSysMLName().getName();
      }
      return "";
    }
  ;

  GuardedTargetSuccession = GuardExpressionMember  "then" TransitionSuccessionMember;
  DefaultTargetSuccession = "else" TransitionSuccessionMember;

  /* TRANSITIONS */
  TransitionStep = "transition" (SysMLNameAndTypePart? "first")? TransitionSourceMember
    TriggerStepMember? GuardExpressionMember? EffectBehaviorMember? "then" TransitionSuccessionMember;
  TargetTransitionStep = TriggerStepMember? GuardExpressionMember? EffectBehaviorMember? "then"
  TransitionSuccessionMember;
  TriggerStep = EmptyParameterMember ItemFeatureMember;
  scope EffectBehaviourUsage = EmptyActionUsage | PerformedActionUsage ( "{" ActivityBodyItem* "}" )?;
  TransitionSuccession = EmptySourceEndMember ConnectorEndMember;

  /* TRANSITION MEMBERSHIPS */
  TransitionSourceMember = memberFeature:QualifiedName;
  TransitionSuccessionMember = TransitionSuccession;
  TriggerStepMember = "accept" TriggerStep;
  GuardExpressionMember = "if" Expression;
  EffectBehaviorMember = "do" EffectBehaviourUsage;


}
