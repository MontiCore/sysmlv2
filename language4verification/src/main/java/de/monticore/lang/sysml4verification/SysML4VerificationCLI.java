package de.monticore.lang.sysml4verification;

import de.monticore.lang.sysml4verification._ast.ASTSysMLModel;
import de.monticore.lang.sysml4verification._cocos.SysML4VerificationCoCoChecker;
import de.se_rwth.commons.logging.Log;

public class SysML4VerificationCLI extends SysML4VerificationCLITOP {

  @Override
  public void run(String[] args) {
    /* generated by template _cli.Run*/

    init();
    org.apache.commons.cli.Options options = initOptions();
    try {
      //create CLI Parser and parse input options from commandline
      org.apache.commons.cli.CommandLineParser cliparser = new org.apache.commons.cli.DefaultParser();
      org.apache.commons.cli.CommandLine cmd = cliparser.parse(options, args);

      //help: when --help
      if (cmd.hasOption("h")) {
        printHelp(options);
      }
      //input: parse the input file
      else if (cmd.hasOption("i")) {
        String file = args[1];
        parse(file);
      }
      //symtable: build Symboltable for model
      else if (cmd.hasOption("s")) {
        String file = args[1];
        ASTSysMLModel model = parse(file);
        createSymbolTable(model);
      }
      //coco: do coco checks on input file
      else if (cmd.hasOption("c")) {
        String file = args[1];
        ASTSysMLModel model = parse(file);
        createSymbolTable(model);
        runDefaultCoCos(model);
      }
    }
    catch (org.apache.commons.cli.ParseException e) {
      // e.getMessage displays the incorrect input-parameters
      Log.error("0xA5C01x05718 Could not process SysML4VerificationCLI parameters: " + e.getMessage());
    }
  }

  @Override
  public  void runDefaultCoCos (de.monticore.lang.sysml4verification._ast.ASTSysMLModel ast)  {
    SysML4VerificationCoCoChecker checker = new SysML4VerificationCoCoChecker();
    // TODO add CoCo to checker
    checker.checkAll(ast);
  }

  @Override
  public org.apache.commons.cli.Options addAdditionalOptions(org.apache.commons.cli.Options options) {

    //CoCos
    options.addOption(org.apache.commons.cli.Option.builder("c")
                          .longOpt("CoCos")
                          .argName("file")
                          .hasArg()
                          .desc("checks Cocos for a given source file")
                          .build());
    return options;

  }

}
