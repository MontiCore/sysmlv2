// (c) https://github.com/MontiCore/monticore

/* ============================================================ */
/* ========================= Plugins ========================== */
/* ============================================================ */

plugins {
  id "monticore" version "$mc_version"
  id "com.github.johnrengelman.shadow" version "6.1.0"
  id "io.github.themrmilchmann.ecj" version "0.2.0"
}

/* ============================================================ */
/* ========================= Project ========================== */
/* ============================================================ */

description = 'SysML_v2_official'

/* ============================================================ */
/* ========================= Versions ========================= */
/* ============================================================ */

def grammarDir = "src/main/grammars"
def grammar_classifier = "grammars"

def commons_cli_version = "1.4"
def antlr_version = '4.7.1'
def commons_lang_version = "3.11"

/* ============================================================ */
/* ======================= Configuration ====================== */
/* ============================================================ */

// configure non-standard source sets
sourceSets {
  main.java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]

  grammars {
    resources {
      srcDirs(grammarDir)
      include "**/*.mc4"
    }
  }
}

configurations { grammar }

test {
  useJUnitPlatform()
}

/* ============================================================ */
/* ======================= Dependencies ======================= */
/* ============================================================ */

dependencies {
  grammar "de.monticore:monticore-grammar:$mc_version:$grammar_classifier"
  grammar "de.monticore.lang:ocl:$mc_version:grammars"
  implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
  implementation "org.apache.commons:commons-lang3:$commons_lang_version"
  implementation "org.antlr:antlr4-runtime:$antlr_version"
  implementation "de.monticore:monticore-runtime:$mc_version"
  implementation "de.monticore:monticore-grammar:$mc_version"
  implementation "de.monticore.lang:ocl:$mc_version"
  implementation "commons-cli:commons-cli:$commons_cli_version"
}

/* ============================================================ */
/* ========================== Tasks =========================== */
/* ============================================================ */

task generate() {
    group = "mc"
}

fileTree(grammarDir).matching { include '**/*.mc4' }.each { g ->
  def taskname = "generateGrammar${g.getName().substring(0,g.getName().lastIndexOf('.'))}"

  task "$taskname" (type: MCTask) {
    grammar = g
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    outputs.upToDateWhen { incCheck(grammarIncludingPackage) }
  }
  generate.dependsOn ("$taskname")
}

compileJava.dependsOn generate

//in 7.7.0-SNAPSHOT one line of code in method SysMLModelContext() is not generated, and lead to error
task modifySysMLModelContext {
  doLast {
    def sysMLModelContextFile = file("$buildDir/generated-sources/monticore/sourcecode/de/monticore/lang/sysmlv2/_parser/SysMLv2AntlrParser.java")
    def content = sysMLModelContextFile.text

    //insert custom code one line after this index of the content
    def insertionPoint = content.indexOf('public static class SysMLModelContext extends ParserRuleContext {')

    if (insertionPoint != -1) {
      def codeToInsert = """public de.monticore.lang.sysmlv2._ast.ASTSysMLModel ret = null;"""
      content = content.substring(0, insertionPoint + 'public static class SysMLModelContext extends ParserRuleContext {'.length()) + codeToInsert + content.substring(insertionPoint + 'public static class SysMLModelContext extends ParserRuleContext {'.length())

      sysMLModelContextFile.text = content
    } else {
      throw new GradleException("Class SysMLModelContext not found in the specified file")
    }
  }
}

modifySysMLModelContext.dependsOn generate
tasks.compileJava.dependsOn modifySysMLModelContext


test {
  exclude '**/SerializationTest.class'
  exclude '**/ComponentSymbolDeserTest.class'
  exclude '**/ParameterDeserTest.class'
  exclude '**/ExpressionParserTest.class'
  exclude '**/PortSymbolDeserTest.class'
  exclude '**/SubcomponentSymbolDeserTest.class'
  exclude '**/OfficialParserTest.class'
  exclude '**/SymbolTableCompletionTest.class'
}






// Fixes issue with java plugin in projects without resources
compileTestJava.doFirst { mkdir sourceSets.main.output.resourcesDir }

// static delegate of "Log" prohibits parallel execution of tests that check the log...
tasks.withType(Test) {
  maxParallelForks = 1
}

tasks.withType(JavaCompile) {
  options.fork = true
  options.encoding = "UTF-8"
  options.deprecation false
  options.warnings = false
  options.headerOutputDirectory.convention(null)
}

// all in one cli-jar
shadowJar {
  manifest {
    attributes "Main-Class": " de.monticore.lang.sysmlv2.SysMLv2Tool"
  }
  archiveClassifier = 'cli'
  minimize()
}

java {
//  withJavadocJar()
  withSourcesJar()
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammars)
  }
}

jar.dependsOn grammarsJar

/* ============================================================ */
/* ======================= Publishing ========================= */
/* ============================================================ */

publishing {
  // configure what artifacts to publish
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
  // and where to upload them
  repositories.maven {
    name = "Gitlab"
    url = sysmlGitlab
    credentials(HttpHeaderCredentials) {
      name = "Job-Token"
      value = System.getenv("CI_JOB_TOKEN")
    }
    authentication {
      header(HttpHeaderAuthentication)
    }
  }
  repositories.maven {
    name = "Nexus"
    credentials.username nexusUser
    credentials.password nexusPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
  }
}

defaultTasks('build')
