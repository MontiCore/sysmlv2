/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

component grammar SysMLStates extends SysMLActions {

  symbol scope StateDef implements SysMLType =
    Modifier UserDefinedKeyword* "state" "def" Name SysMLCardinality? Specialization* ("(" (SysMLParameter || ",")* ")")?
    ("{"
      (EntryAction | DoAction | ExitAction | SysMLElement)*
    "}" | ";") ;

  symbol scope StateUsage implements SysMLElement =
    Modifier UserDefinedKeyword* exhibited:["exhibit"]? "state" Name?
    SysMLCardinality? Specialization*
    ("(" (SysMLParameter || ",")* ")")? paralled:["parallel"]? DefaultValue?
    ("{"
      (EntryAction | DoAction | ExitAction | SysMLElement)*
    "}" | ";") ;

  ExhibitedStateReference implements SysMLElement =
    UserDefinedKeyword* "exhibit" MCQualifiedName?
    SysMLCardinality? Specialization*
    ("{"
      SysMLElement*
    "}" | ";") ;

  symbolrule StateUsage =
    exhibited: boolean
    userDefinedKeywords: Name*
  ;

  symbol SysMLTransition implements SysMLElement =
    ("transition" Name?)?
    ("first" src:MCQualifiedName)?
    (InlineAcceptActionUsage)?
    ("if" guard:Expression)?
    ("do" doAction:InlineActionUsage)?
    "then" SuccessionThen ;

  EntryAction =
    "entry" ( ";" |
              ActionUsage |
              MCQualifiedName
              ("{"
                 SysMLElement*
               "}" | ";")
            ) ;

  DoAction =
    "do" ( ActionUsage |
           MCQualifiedName
           ("{"
               SysMLElement*
            "}" | ";")
         ) ;

  ExitAction = "exit" ( ActionUsage | action:Name@ActionUsage ";") ;

}
