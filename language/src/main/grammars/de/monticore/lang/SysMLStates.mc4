/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

component grammar SysMLStates extends SysMLActions {

  symbol scope (shadowing) StateDef implements SysMLType =
    Modifier "state" "def" Name Specialization* ("(" (SysMLParameter || ",")* ")")?
    ("{"
      EntryAction?
      DoAction?
      ExitAction?
      SysMLElement*
    "}" | ";") ;

  symbol scope (shadowing) StateUsage implements SysMLElement =
    Modifier exhibited:["exhibit"]? "state" Name Specialization* ("(" (SysMLParameter || ",")* ")")? paralled:["parallel"]? DefaultValue
    ("{"
      EntryAction?
      DoAction?
      ExitAction?
      SysMLElement*
    "}" | ";") ;
  ExhibitUsage implements SysMLElement = //TODO exhibit in der Spec ueberpruefen
  "exhibit" ("state")? state:Name@StateUsage ";";

  // TODO Ãœberlegen, ob nicht doch durch Grammatik enforcen, dass Transitionen nur in States vorkommen
  symbol SysMLTransition implements SysMLElement =
    ("transition" Name?)?
    ("first" src:Name@StateUsage)?
    (InlineAcceptActionUsage)?
    ("if" guard:Expression)?
    (DoAction)?
    "then" tgt:Name@StateUsage ";" ;

  /**
   * Offizielle Dokumentation erlaubt ActionUsage, referenz auf ActionUsage oder leeres Argument
   */
  EntryAction = "entry" (ActionUsage | action:Name@ActionUsage ";" | ";");

  DoAction = "do" (ActionUsage | action:Name@ActionUsage ";" | ";");

  ExitAction = "exit" (ActionUsage | action:Name@ActionUsage ";" | ";");

}
