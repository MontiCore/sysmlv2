/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

/**
 * Basis für die einzelnen SysML-Teilgrammatiken (ich weigere mich noch sie "Teilsprachen" zu nennen).
 */
component grammar SysMLBasis
    extends de.monticore.literals.MCCommonLiterals,     // SingleCharacter
            de.monticore.expressions.ExpressionsBasis,  // Expression
            de.monticore.types.MCBasicTypes,            // MCQualifiedName, MCType
            de.monticore.symbols.OOSymbols,             // OOTypes
            de.monticore.Cardinality,                   // Cardinality
            de.monticore.UMLModifier                    // Modifier
{

  KerMLCardinality extends Cardinality =
    "[" lower:Expression ( ".." upper:Expression )? "]" ;

  /*
   * ##################################################################
   * SysML Basis Symbole
   * ##################################################################
   */

  /** Elemente der Bodies/Pakete */
  interface SysMLElement;

  /** Element mit eigenem Symbol für resolve (zB. für ReqDef) */
  interface symbol SysMLType extends SysMLElement;

  SysMLCardinality =
    Cardinality (["ordered"] | ["nonunique"])* ;

  /**
   * Common interface for any specialization. According to the official spes, this would include subsetting, typing,
   * etc. Needs MCType instead of MCQualifiedName, because attribute usages (any maybe others) can be typed by MontiCore
   * types.
   */
  interface Specialization = superTypes:MCType+;

  // Specialization ist spezifisch für Definitions
  SysMLSpecialization implements Specialization =
      (":>" | "specializes") superTypes:(MCType || ",")+;

  // Subsetting ist spezifisch für Usages
  SysMLSubsetting implements Specialization =
      (":>" | "subsets") superTypes:(MCType || ",")+;

  SysMLRedefinition implements Specialization =
      (":>>" | "redefines") superTypes:(MCType || ",")+ SysMLCardinality?;

  // TODO Nur bei Event Occurences
  /**
   * [An event occurence] is related to another occurrence usage,
   * representing the occurring event, by a reference subsetting relationship, which is a special kind of subsetting
   * relationship specified using the keyword references or the symbol ::>.
   */
  SysMLReference implements Specialization =
      ("::>" | "references") superTypes:(MCType || ",")+;

  /**
   * TODO Conjugated nur bei Port Usages!
   * Cardinality bei mehreren Typen macht wenig Sinn, aber die Grammatik und damit der AST werden sehr kompliziert, wenn
   * man versucht alle Eventualitäten durch die Grammatik abzudecken.
   */
  SysMLTyping implements Specialization =
       (":" | "defined by") conjugated:["~"]? superTypes:(MCType || ",")+ SysMLCardinality?;

  /* Adaptierung zwecks Rückwärtskompatibilität auf vorherige Version mit direkter MC-Cardinality */
  astrule SysMLTyping =
      method public de.monticore.cardinality._ast.ASTCardinality getCardinality() {
        if(isPresentSysMLCardinality()) {
          return getSysMLCardinality().getCardinality();
        }
        Log.error("0x10005 get for Cardinality can't return a value. Attribute is empty.");
        // Normally this statement is not reachable
        throw new IllegalStateException();
      }
      method public boolean isPresentCardinality() {
        return isPresentSysMLCardinality();
      } ;

  /** Refinement relates two behaviors and enforces a subset wrt. to FOCUS SPSes */
  SysMLRefinement implements Specialization =
       "refines" superTypes:(MCType || ",")+;

  /*
   * ##################################################################
   * Häufig vorkommende Konstrukte mit konkr. Syntax
   * ##################################################################
   */

  /**
   * Die Default-Richtung eines Elements ist "in".
   * Return darf nur in Calculations verwendet werden um das "out" zu markieren.
   */
  enum SysMLFeatureDirection = "in" | "out" | "inout" | "return" ;

  /**
   * Parameters
   * TODO "stream" überall ausser AdvRequirements verbieten? Gibts eine bessere Lösung?
   */
  SysMLParameter implements Field =
    ["stream"]? SysMLFeatureDirection? Name Specialization* ("=" binding:Expression)? DefaultValue;

  DefaultValue = ("default" default:Expression)?;

  /*
   * ##################################################################
   * SysML-Spezifischen Syntax-Erweiterungen
   * ##################################################################
   */

  SysMLQualifiedName extends MCQualifiedName = parts:(Name || "::")+;

  token SysMLComment =
    'c''o''m''m''e''n''t' (WS* Name)? (WS* 'a''b''o''u''t' WS* Name)? WS* ML_COMMENT : -> skip
    {storeComment();} ;

  token SysMLDoc =
    'd''o''c' WS* ML_COMMENT : -> skip
    {storeComment();} ;

  /** Alles ausser Anführungszeichen */
  fragment token Anything
      = ~ ('\'') ;

  SysMLIdentifier = "<" Name ">" ;

  // Zusätzliche Modifier: "ref", "end"
  @Override
  Modifier =
      Stereotype?
      (   ["public"]       | [public:"+"]
        | ["private"]      | [private:"-"]
        | ["protected"]    | [protected:"#"]
        | ["final"]
        | ["abstract"]
        | ["local"]
        | ["derived"]      | [derived:"/"]
        | ["readonly"]     | [readonly:"?"]
        | ["static"]
        | ["ref"]
        | ["end"]
      )*;

}
