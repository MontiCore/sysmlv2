/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

// TODO

component grammar SysMLBasis
    extends de.monticore.literals.MCCommonLiterals,     // SingleCharacter
            de.monticore.expressions.ExpressionsBasis,  // Expression
            de.monticore.types.MCBasicTypes,            // MCQualifiedName, MCType
            de.monticore.symbols.OOSymbols,             // OOTypes
            de.monticore.Cardinality,                   // Cardinality
            de.monticore.UMLModifier              // Modifier
{

  /*
   * ##################################################################
   * SysML Basis Symbole
   * ##################################################################
   */

  /** Elemente der Bodies/Pakete */
  interface SysMLElement;

  /** Element mit eigenem Symbol für resolve (zB. für ReqDef) */
  interface symbol SysMLType extends SysMLElement;

  /**
   * Common interface for any specialization. According to the official spes, this would include subsetting, typing,
   * etc. Needs MCType instead of MCQualifiedName, because attribute usages (any maybe others) can be typed by MontiCore
   * types.
   */
  interface UsageSpecialization = superTypes:MCType+;

  interface DefSpecialization = superTypes:MCType+;

  SysMLSpecialization implements DefSpecialization =
      (":>" | "specializes") superTypes:(MCType || ",")+;

  SysMLSubsetting implements UsageSpecialization =
      (":>" | "subsets") superTypes:(MCType || ",")+;

  SysMLRedefinition implements UsageSpecialization, DefSpecialization =
      (":>>" | "redefines") superTypes:(MCType || ",")+;

  /**
   * TODO Conjugated nur bei Port Usages!
   * Cardinality bei mehreren Typen macht wenig Sinn, aber die Grammatik und damit der AST werden sehr kompliziert, wenn
   * man versucht alle Eventualitäten durch die Grammatik abzudecken.
   */
  SysMLTyping implements UsageSpecialization, DefSpecialization =
       ":" conjugated:["~"]? superTypes:(MCType || ",")+ Cardinality?;

  /** Refinement relates two behaviors and enforces a subset wrt. to FOCUS SPSes */
  SysMLRefinement implements UsageSpecialization, DefSpecialization =
       "refines" superTypes:(MCType || ",")+;

  /*
   * ##################################################################
   * Häufig vorkommende Konstrukte mit konkr. Syntax
   * ##################################################################
   */

  /**
   * Default: TODO Doc lesen
   * TODO final dokumentieren + CoCo für offiziellen Einsatz verbieten
   */
  enum SysMLFeatureDirection = "in" | "out" | "inout" | "final" ;

  /**
   * Parameters
   * TODO "stream" überall ausser AdvRequirements verbieten? Gibts eine bessere Lösung?
   */
  SysMLParameter implements Field =
    ["stream"]? SysMLFeatureDirection? Name UsageSpecialization* ("=" binding:Expression)? DefaultValue;

  DefaultValue = ("default" default:Expression)?;
  /*
   * ##################################################################
   * SysML-Spezifischen Syntax-Erweiterungen
   * ##################################################################
   */

  SysMLQualifiedName extends MCQualifiedName = parts:(Name || "::")+;

  token SysMLComment =
    'c''o''m''m''e''n''t' (WS* Name)? (WS* 'a''b''o''u''t' WS* Name)? WS* ML_COMMENT : -> skip
    {storeComment();} ;

  token SysMLDoc =
    'd''o''c' WS* ML_COMMENT : -> skip
    {storeComment();} ;

}
