/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

import de.monticore.SCStateHierarchy;

/**
 * Extending the abstract component-connector language with state machines for
 * imperative behavior modeling.
 *
 * Compare [KPRR21](se-rwth.de/publications)
 */
component grammar Automaton extends ComponentConnector {

  interface symbol ExtendedMildComponent extends MildComponent = ;

  interface symbol Automaton = Name ;

  symbolrule Automaton =
    stateSpace: StateSpace
    initialConfiguration: Configuration*
    eventTransitions: EventTransition*
    tickTransitions: Transition*
  ;

  interface StateSpace =
    states:MCQualifiedName* variables:Name@Variable* ;

  interface Configuration =
    State Output* ;

  interface State =
    Name VariableValue* ;

  interface VariableValue =
    variable:Name@Variable value:Expression ;

  interface Output =
    port:Name@Port value:Expression ["comprehension"]? ["listValue"]? ;

  interface EventTransition =
    port:Name@Port Transition* ;

  interface Transition =
    start:MCQualifiedName
    guard:Expression
    result:Configuration
    documentation:String;

}
