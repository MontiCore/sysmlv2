/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

component grammar SysMLExpressions extends de.monticore.literals.MCCommonLiterals,          // SignedLiteral
                                           de.monticore.expressions.CommonExpressions,
                                           de.monticore.expressions.AssignmentExpressions,
                                           de.monticore.expressions.StreamExpressions,
                                           de.monticore.ocl.OCLExpressions,
                                           de.monticore.ocl.SetExpressions,
                                           de.monticore.types.MCBasicTypes                  // MCType
{
  /**
   * Extends the usual FieldAccessExpression by introducing a SysML specific
   * notation of writing qualified names.
   * This is syntactically similar to package names:
   * So when the language shall also allow QualifiedNames as Expressions,
   * they might be parsed here. E.g. in "x::y::Person", "x" is
   * parsed as NameExpression, even though it is a package name.
   * This is to be resolved via SymbolTable.
   * When resolved, the AST should be restructured directly after the parsing.
   */
  SysMLFieldAccessExpression extends FieldAccessExpression implements Expression <290> =
    Expression "::" Name;

  SysMLInstantiation implements Expression = MCType Arguments;

  // Infinity literal can be negative, but there cannot be any space between "-" and "INF"
  Infinity implements Literal, SignedLiteral = {noSpace(2)}? (negative:["-"]) "INF" | "INF";

  /**
   * This part is a little experiment. Instead of wasting ASCII-characters for mathematical symbols, we use the latex
   * commands and render them nicely using VSCode's "Prettify Symbols Model" extension.
   * The priority is copied from the LessEqual-, GreaterEqual-, etc. -Expressions (CommonExpressions).
   */
  SubsetEquationExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"\\subseteq" right:Expression ;

  SubsetExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"\\subset" right:Expression ;

  SupersetEquationExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"\\supseteq" right:Expression ;

  SupersetExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"\\supset" right:Expression ;
}
