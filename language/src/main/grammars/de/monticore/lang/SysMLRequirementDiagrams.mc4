/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

grammar SysMLRequirementDiagrams extends de.monticore.lang.SysMLParametrics {

  start SysMLElement;

  // BaseRequirement is abstract and is extended by all RequirementDefinition & RequirementUsage.
  // Common logic for both def. and usage can be extracted to it.
  abstract scope (shadowing) BaseRequirement = ParameterList?;

  symbol scope (shadowing) RequirementDef implements SysMLType extends BaseRequirement =
    "requirement" "def" ("<" humanId:String ">")? Name
    SysMLSpecialization?
    ParameterList?
    RequirementBody;

  symbol scope (shadowing) RequirementUsage implements ParametricsElement, SysMLUsage extends BaseRequirement =
    ["satisfy"]? "requirement" ("<" humanId:String ">")? Name (":" MCType)?
    SysMLSubsetting?
    ParameterList?
    RequirementBody;

  RequirementBody =
    ("{"
      (RequirementSubject | SysMLAttribute | SysMLAssumption |
       RequirementUsage   | RequirementReference)*
    "}" | ";") ;

  SysMLAssumption = (["require"] | ["assume"]) ConstraintUsage;
  symbol RequirementSubject implements SysMLUsage = "subject" Name (":" MCType | "=" binding:Expression ) ";";
  RequirementReference = "require" Name@RequirementUsage ";";

  RequirementSatisfaction implements BDUsageMember, ADElement =
    "satisfy" req:MCQualifiedName "by" subject:MCQualifiedName ";";

}
