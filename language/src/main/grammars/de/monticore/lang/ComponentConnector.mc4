/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

import de.monticore.symbols.BasicSymbols.*;

/**
 * Definiert Erweiterungen für MontiCore's CompSymbols, die aus Anforderungen der MontiBelle-Gruppe und spezifisch
 * der Transformation von Component-Connector-Modellen nach Isabelle hervor gehen. Die Ergebnisse werden bis 31.08.2023
 * konsolidiert und ggfs. nach MontiCore übertragen.
 *
 * Hinweise:
 * - Die Namensgebung durch Präfix "Mild" ist eine Altlast aus der MontiBelle-Transformation und wird entfernt
 * - Symbol-Vererbung ist unseres Wissens nach in MontiCore verpönt. Wir benutzen sie nur, bis die Ergebnisse
 *   konsolidiert und übertragen wurden.
 */
component grammar ComponentConnector
  extends de.monticore.types.MCBasicTypes,
          de.monticore.symbols.CompSymbols,
          de.monticore.Cardinality
{
  /* TODO concrete symbols implementing other interface symbols is problematic and should not happen.
      In our case we require additional symbolrules for transformation that are not present in CompSymbols.
      - Overriding the interface is not possible (0xA4007)
      Potential solution: We define our own component interface symbols with extension to be later migrated to MontiCore
                          - con: no traversal is generated for the ASTs (neither in traverser nor in handler)
   */

  /**
   * Wir definieren im Folgenden Erweiterungen für ComponentSymbols durch Symbol Rules.
   * Techn. Hinweis: "scope" wird von Component vererbt.
   */
  interface symbol MildComponent extends Component = Name ;

  /**
   * Connectors sind keine Symbole, beinhalten aber essentielle Informationen für Component-Connector-Netzwerke. Wir
   * definieren deswegen das Interface und fordern, dass ComponentSymbols eine Liste von Connectors bereit halten.
   * Unsere Java-Implementation sieht vor, dass die Connectors aus dem AST der jeweiligen konkreten Sprache (SysML oder
   * MontiArc) abgeleitet werden.
   */
  interface Connector = source:MildPort target:MildPort ;

  /**
   * Wir fügen hinzu:
   * - Verfeinerung. Alternative Implementation unter Verwendung der existierenden "superTypes" mit vererbter
   *                 CompKindExpression wurde verworfen, da unserer Meinung nach die Semantik durch Syntax und
   *                 explizit in der Grammatik erkennbar sein sollte.
   * - Connectors.   Sind essesntielle Information für die Komposition. Subkomponenten können als Symbole im Scope
   *                 schwimmen. Connectors nicht.
   * - Parameter.    Die MontiCore-Implementierung der CompSymbols versteckt diese in Java-Klassen. Wir machen sie nur
   *                 explizit.
   */
  symbolrule MildComponent =
    refinements: de.monticore.types.check.CompKindExpression*
    connectors: Connector*
    parameters: de.monticore.symbols.basicsymbols._symboltable.VariableSymbol*
  ;

  /**
   * Wir definieren im Folgenden Erweiterungen für PortSymbols durch Symbol Rules.
   */
  interface symbol MildPort extends Port = Name;

  /**
   * Wir fügen hinzu:
   * - Cardinalities. Eine Alternative Implementierung durch Auflösen der Kardinalitäten wäre sehr komplex, da
   *                  Expressions umgeschrieben werden müssten ("forall i in {1,2,3}. myport[i].nth(7) > 5" müsste vmtl.
   *                  zu "forall ch in {channel_1, channel_2,...}. nth(7, ch) > 5" transformiert werden).
   */
  symbolrule MildPort =
    cardinality: Cardinality
  ;

  /**
   * Spezifikationen sind eine abstrakte (nicht implementierbare) Variante um Verhalten anzugeben.
   */
  interface symbol MildSpecification = Name ;

  /**
   * Techn. Hinweis: Die Annahmen und Forderungen sollten idealerweise Expression sein. Aus Zeitmangel arbeiten wir
   * vorerst mit bereits gedruckten Strings. Grösstes Hindernis ist die nötige Transformation zwischen Ausdrücken der
   * konkreten Sprache (SysML): "portUsage.attrUsage.nth(7)" und der abstrakten Sprache: "derivedPort.nth(7)" (wobei
   * "derivedPort" eher "port_portUsage_attrUsage" heissen wird).
   */
  symbolrule MildSpecification =
    assumptions:StringCharacters*
    predicates:StringCharacters*
  ;

  /**
   * Wir definieren im Folgenden Erweiterungen für PortSymbols durch Symbol Rules.
   */
  interface symbol MildInstance extends Subcomponent = Name ;

  /**
   * Parameter werden instanziiert und mit Werten belegt. Dabei können diese Werte natürlich symbolischer Natur sein
   * (zB. ein weitergereichter Parameter der Vater-Komponente).
   * Techn. Hinweis: Die Werte sollten idealerweise Expression sein. Siehe Kommentar bei MildSpecification.
   */
  interface ParameterValue = Variable value:StringCharacters ;

  /**
   * Wir fügen hinzu:
   * - ParameterValues. Wir konnten diese noch nicht in MontiCore's Implementierung finden.
   */
  symbolrule MildInstance =
    parameterValues:ParameterValue*
  ;

}
