/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

grammar SysMLStateMachineDiagrams extends de.monticore.lang.SysMLActivityDiagrams {

  start SysMLElement;

  interface STMUsageMember extends SysMLElement;

  NonBehaviorBodyItem (t : Type) =
      t.ownedRelationship += OwnedDocumentation
    | t.ownedRelationship += Import
    | t.ownedRelationship += AliasMember
    | t.ownedRelationship += DefinitionMember(t)
    | t.ownedRelationship += VariantUsageMember
    | t.ownedRelationship += NonOccurrenceUsageMember
    | t.ownedRelationship += StructureUsageMember
    | t.ownedRelationship += StructureSuccessionMember(t)

  StructureUsageMember : FeatureMembership =
    MemberPrefix(this)
    ownedMemberFeature = StructureUsageElement(this)

  StructureUsageElement (m : Membership) : Feature =
      OccurrenceUsage(m)
    | IndividualUsage(m)
    | PortionUsage(m)
    | EventOccurrenceUsage(m)
    | ItemUsage(m)
    | PartUsage(m)
    | ViewUsage(m)
    | RenderingUsage(m)
    | PortUsage(m)
    | ConnectionUsage(m)
    | InterfaceUsage(m)
    | AllocationUsage(m)
    | Message(m)
    | FlowConnectionUsage(m)
    | SuccessionFlowConnectionUsage(m)


  symbol scope (shadowing) StateDef implements SysMLType = "state" "def" Name ("(" (SysMLParameter || ",")* ")")?
    ("{"
      STMEntryAction?
      STMDoAction?
      STMExitAction?
      STMUsageMember*
    "}" | ";") ;

  symbol scope (shadowing) StateUsage implements STMUsageMember, SysMLUsage =
    "state" Name? (":" MCType)? ("(" (SysMLParameter || ",")* ")")?
    ("{"
      STMEntryAction?
      STMDoAction?
      STMExitAction?
      STMUsageMember*
    "}" | ";") ;

  symbol STMTransition implements STMUsageMember =
    ("transition" Name?)?
    ("first" src:Name@StateUsage)?
    ("accept" AcceptParameterPart)?
    ("if" guard:Expression)?
    (STMDoAction)?
    "then" tgt:Name@StateUsage ";" ;

  /*
   * TODO unklar, aber mir scheint folgendes erlaubt:
   * > entry action { send a to b; send x to y; }
   * >  if b1 then S1;
   * >  if b2 then S2;
   * >  then S3;
   */
  STMEntryAction = "entry" ActionUsage? ";" (("if" guard:Expression)? "then" target:Name@StateUsage ";")*;

  STMDoAction = "do" ActionUsage;

  STMExitAction = "exit" ActionUsage;

}
