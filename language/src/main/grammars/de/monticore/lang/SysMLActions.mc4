/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

component grammar SysMLActions
    extends de.monticore.lang.SysMLBasis {

  symbol scope ActionDef implements SysMLType =
    Modifier "action" "def" Name DefSpecialization*
    ("{"
      SysMLElement*
    "}" | ";") ;

  symbol scope ActionUsage implements SysMLElement =
    Modifier "action" (Name UsageSpecialization*)? DefaultValue
    ("{"
      SysMLElement*
     "}" | ";")? ;

  symbol scope ForkAction extends ActionUsage = Modifier "fork" (Name UsageSpecialization*)? DefaultValue ";";

  symbol scope DecideAction extends ActionUsage = Modifier "decide" (Name UsageSpecialization*)? DefaultValue ";"
    ("if" guard:Expression "then" tgt:ActionUsage ";")*;

  symbol scope JoinAction extends ActionUsage = Modifier "join"  (Name UsageSpecialization*)? DefaultValue ";";

  symbol scope MergeAction extends ActionUsage = Modifier "merge"  (Name UsageSpecialization*)? DefaultValue ";";

  symbol scope LoopAction extends ActionUsage = ("loop" | "while" while:Expression) "action"
    (Name UsageSpecialization*)?
    "{"
      SysMLElement*
    "}" "until" until:Expression ";";

  symbol scope SendActionUsage extends ActionUsage =
    ("action" Name)? "send" payload:Expression (key("via") | key("to")) target:MCQualifiedName (";")? ;

  symbol scope AssignmentActionUsage extends ActionUsage =
    ("action" Name)? "assign" target:MCQualifiedName ":=" valueExpression:Expression (";")? ;

  // TODO Name nicht optimal, dass AcceptActionUsage die Inline-Variante erweitert passt nicht so richtig
  InlineAcceptActionUsage =
    "accept" (payloadHandle:Name ":")? payloadType:MCType ("via" receiver:MCQualifiedName)? ;

  AcceptActionUsage extends InlineAcceptActionUsage implements SysMLElement =
    "accept" (payloadHandle:Name ":")? payloadType:MCType ("via" receiver:MCQualifiedName)? ";" ;

  PerformAction implements SysMLElement = "perform" action:Name@ActionUsage ";" ;

  SysMLSuccession implements SysMLElement =
    ("first" src:Name@ActionUsage)?
    (InlineAcceptActionUsage)?
    ("if" guard:Expression)?
        "then" (tgt:Name@ActionUsage ";" | ActionUsage);

  SysMLFirst implements SysMLElement =
    "first" name:Name ";" ;

}
