/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

component grammar SysMLActions
    extends de.monticore.lang.SysMLBasis {

  symbol scope ActionDef implements SysMLType =
    Modifier UserDefinedKeyword* "action" "def"
    SysMLIdentifier? Name SysMLCardinality? Specialization*
    ("{"
      SysMLElement*
    "}" | ";") ;

  /**
   * Inline-Usages do not terminate in semicolons or closing brackets and are intended
   * for use in other constructs such as successions or transitions.
   */
  scope InlineActionUsage implements IInlineOccurrenceUsage =
    Modifier UserDefinedKeyword* "action" SysMLIdentifier? Name? SysMLCardinality? Specialization* DefaultValue?
    ("{"
      SysMLElement*
     "}")? ;

  /**
   * Because the inline-variant is not a SysMLElement, this inheritance cannot be the
   * other way around!
   */
  symbol ActionUsage implements OccurrenceUsageElement =
    Modifier UserDefinedKeyword* "action" SysMLIdentifier? Name? SysMLCardinality? Specialization* DefaultValue?
    ("{"
      SysMLElement*
     "}" | ";") ;

  /** ==================================================================================================================
   * Control Nodes
   * ================================================================================================================ */

  symbol scope ForkAction extends ActionUsage =
    Modifier UserDefinedKeyword* "fork" SysMLIdentifier? Name? SysMLCardinality? Specialization* DefaultValue?
    ("{"
       SysMLElement*
     "}" | ";") ;

  symbol scope DecideAction extends ActionUsage =
    Modifier UserDefinedKeyword* "decide" SysMLIdentifier? Name? SysMLCardinality? Specialization* DefaultValue?
    ("{"
       SysMLElement*
     "}" | ";") ;

  symbol scope JoinAction extends ActionUsage =
    Modifier UserDefinedKeyword* "join" SysMLIdentifier? Name? SysMLCardinality? Specialization* DefaultValue?
    ("{"
       SysMLElement*
     "}" | ";") ;

  symbol scope MergeAction extends ActionUsage =
    Modifier UserDefinedKeyword* "merge" SysMLIdentifier? Name? SysMLCardinality? Specialization* DefaultValue?
    ("{"
       SysMLElement*
     "}" | ";") ;

  /** ==================================================================================================================
   * Special Actions
   * ================================================================================================================ */

  IfActionUsage implements OccurrenceUsageElement extends ActionUsage =
    Modifier UserDefinedKeyword* "action"?
    SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "if" guard:Expression
    (InlineActionUsage | "{" ifElems:SysMLElement* "}")
    ("else" (ActionUsage | "{" elseElems:SysMLElement* "}"))? ;

  /** See section 7.16.8 in 2a-OMG_Systems_Modeling_Language.pdf */
  Payload =
    (payloadHandle:Name ":")? payloadType:MCType SysMLCardinality? |
     payloadHandle:Name? "when" changeTrigger:Expression |
     payloadHandle:Name? "at" timeTrigger:Expression |
     payloadHandle:Name? "after" relativeTimeTrigger: Expression ;

  scope InlineAcceptActionUsage extends InlineActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "accept" Payload ("via" receiver:MCQualifiedName)?
    ("{"
       SysMLElement*
     "}")? ;

  symbol AcceptActionUsage implements OccurrenceUsageElement extends ActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "accept" Payload ("via" receiver:MCQualifiedName)?
    ("{"
       SysMLElement*
     "}" | ";") ;

  scope InlinePerformActionUsage extends InlineActionUsage =
    Modifier UserDefinedKeyword* "perform" "action"? SysMLIdentifier? Name? SysMLCardinality?
    Specialization* DefaultValue?
    ("{"
       SysMLElement*
     "}")? ;

  symbol PerformActionUsage implements OccurrenceUsageElement extends ActionUsage =
    Modifier UserDefinedKeyword* "perform" "action"? SysMLIdentifier? Name? SysMLCardinality?
    Specialization* DefaultValue?
    ("{"
       SysMLElement*
     "}" | ";") ;

  PerformActionReference implements OccurrenceUsageElement extends ActionUsage =
    Modifier UserDefinedKeyword* "perform" "action"? MCQualifiedName SysMLCardinality? Specialization* DefaultValue?
    ("{"
       SysMLElement*
     "}" | ";") ;

  scope InlineAssignmentActionUsage extends InlineActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "assign" target:MCQualifiedName ":=" valueExpression:Expression
    ("{"
       SysMLElement*
     "}")? ;

  AssignmentActionUsage implements OccurrenceUsageElement extends ActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "assign" target:MCQualifiedName ":=" valueExpression:Expression
    ("{"
       SysMLElement*
     "}" | ";") ;

  InlineSendActionUsage extends InlineActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "send" payload:Expression
    ("via" sender:MCQualifiedName)?
    ("to" target:MCQualifiedName)?
    ("{"
       SysMLElement*
     "}")? ;

  SendActionUsage implements OccurrenceUsageElement extends ActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "send" payload:Expression
    ("via" sender:MCQualifiedName)?
    ("to" target:MCQualifiedName)?
    ("{"
       SysMLElement*
     "}" | ";") ;

  symbol scope WhileActionUsage extends ActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "while" while:Expression ("(" (SysMLParameter || ",")* ")")?
    BodyClause ("until" until:Expression ";")? ;

  /**
   * The keyword loop may be used as a shorthand for while true. This is useful for a while loop that is designed to
   * be non-terminating or will be terminated with just an until expression.
   */
  symbol scope LoopActionUsage extends WhileActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "loop" BodyClause ("until" until:Expression ";")? ;

  symbol scope ForLoopActionUsage extends ActionUsage =
    Modifier UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
    "for" loopVar:Name loopSpecs:Specialization* "in" (start:Expression ".." end:Expression | sequence:Expression)
    BodyClause ;

  BodyClause =
     UserDefinedKeyword* "action"? SysMLIdentifier? Name? SysMLCardinality? Specialization*
     "{" SysMLElement* "}";

  /** ==================================================================================================================
   * Successions
   * ================================================================================================================ */

  SuccessionFirst =
    MCQualifiedName SysMLCardinality? Specialization* ("{" SysMLElement* "}")? |
    IInlineOccurrenceUsage ;

  SuccessionThen =
    MCQualifiedName SysMLCardinality? Specialization* ("{" SysMLElement* "}" | ";") |
    SysMLElement ;

  // Base successions according to 7.13.5 (Connections > Successions as Usages)
  SysMLSuccession implements SysMLElement =
    Modifier UserDefinedKeyword* "succession"?
    SysMLIdentifier? Name? SysMLCardinality? Specialization*
    ("first" SuccessionFirst)?
     "then" SuccessionThen ;

  /** ==================================================================================================================
   * Special notation for successions in action bodies, according to 7.16.4
   * ================================================================================================================ */

  // TBD - for now this is allowed anywhere
  interface ActionElement extends SysMLElement ;

  /**
   * The source of a succession may be specified separately from the target by using the keyword first followed by a
   * qualified name or feature chain for the source action usage
   */
  SysMLFirstSuccession implements ActionElement =
    "first" MCQualifiedName ";" ;

  /**
   * A succession within the body of an action definition or usage may be given a guard condition. A guard is given as a
   * Boolean-valued expression preceded by the keyword if. It is placed in the declaration of the succession after the
   * specification of the source of the succession and before the specification of the target.  Further, the keyword
   * else may be used in place of a guard expression to indicate a succession to be taken if the guards evaluate to
   * false on all of an immediately preceding set of conditional successions. However, the target of a conditional
   * succession must be specified as a qualified name or feature chain and cannot be a full action usage declaration,
   * even when the shorthand notation is used.
   */
  SysMLConditionalSuccession implements ActionElement =
    Modifier UserDefinedKeyword* "succession"?
    SysMLIdentifier? Name? SysMLCardinality? Specialization*
    ("first" SuccessionFirst)?
    (["if"] guard:Expression "then" | ["else"])
    MCQualifiedName SysMLCardinality? innerSpecs:Specialization* ("{" SysMLElement* "}" | ";") ;

  /** ==================================================================================================================
   * Calculations
   * ================================================================================================================ */

  symbol scope CalcDef implements SysMLType =
    Modifier UserDefinedKeyword* "calc" "def" Name SysMLCardinality? Specialization*
    ("{"
      SysMLElement*
      Expression?
    "}" | ";") ;

  symbol CalcUsage implements SysMLElement =
    Modifier UserDefinedKeyword* "calc" SysMLIdentifier? Name? SysMLCardinality? Specialization*
    DefaultValue?
    ("{"
      SysMLElement*
      Expression?
    "}" | ";");

}
