/* (c) https://github.com/MontiCore/monticore */
plugins {
  id "application"
  id 'de.monticore.language-server' version "$mclsg_version"
}

group = 'de.monticore.lang.sysml'

mainClassName = "de.monticore.lang.sysml4verification._lsp.LanguageServerCLI"

dependencies {
  // Language and parent language
  grammar(project(":language")) {
    exclude group: 'de.monticore', module: 'monticore-grammar'
    capabilities {
      requireCapability("de.monticore.lang:language-grammars")
    }
  }
  // MPf: Kopiert von MontiArc wegen Dopplung der Grammatik in "normaler" JAR und "-grammars" JAR
  grammar ("de.monticore:monticore-grammar:$mc_version") {
    capabilities {
      requireCapability("de.monticore:monticore-grammar-grammars")
    }
  }

  implementation(project(":language"))

  // Dependencies marked as "runtime" in the language's build script. Need to re-specify them here!
  implementation "de.monticore:monticore-grammar:$mc_version"
  implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
  implementation "de.monticore:monticore-runtime:$mc_version"
  implementation "org.antlr:antlr4-runtime:4.7.1"
  implementation "org.jgrapht:jgrapht-core:1.3.1"
  implementation "de.monticore:mc-assemblies:0.0.6"
  implementation "de.monticore.lang:ocl:7.0.0" // MPf: Ganz komische Fehler wegen "*OCL*", diese Zeile hatte Alex drin

  // MCLSG
  implementation "de.monticore.language-server:monticore-language-server-runtime:$mclsg_version"

  modules {
    // somewhere in monticore some bootstrap (bs) versions were erroneously passed on
    module("de.monticore.bs:monticore-grammar") {
      replacedBy("de.monticore:monticore-grammar")
    }
  }
}

test {
  useJUnitPlatform()
}

// Remove once MontiCore 7.2 or higher is used
//System.setProperty("mcLt72workaround", "true");

import de.mclsg.TaskTypes
import de.mclsg.task.*
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

task autoconfigure(type: AutoconfigureTask) {
  mclsg {
    languageName = "de.monticore.lang.SysMLv2"
    fileExtension = "sysml"
  }
  including(TaskTypes.VSCODE_PLUGIN)
}
tasks.build.dependsOn autoconfigure

// Edit package.json of the generated project
task editPackageJson() {
  doLast {
    def file = new File("${autoconfigure.mclsg.getFullVscodePluginDir()}/package.json")
    def json = new JsonBuilder(new JsonSlurper().parse(file))
    json.content.version = "$version"
    json.content.publisher = "MontiBelle"
    json.content.name = "sysmlv2" // No spaces, no capitals
    json.content.icon = "icons/logo.png"

    def iconThemesMap = [
        "id"   : "theme",
        "label": "default",
        "path" : "./icons/themes.json"
    ]
    json.content.contributes.iconThemes = [iconThemesMap]

    file.write(json.toPrettyString())
  }
}

task copyIcon(type: Copy) {
  from "$projectDir"
  include "logo.png"
  into(autoconfigure.mclsg.getFullVscodePluginDir())
}

task copyFileIcons(type: Copy) {
  from "$projectDir"
  include "icons/**"
  into autoconfigure.mclsg.getFullVscodePluginDir()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = "language-server"
      from components.java
    }
  }
  repositories.maven {
    name = "Gitlab"
    url = sysmlGitlab
    credentials(HttpHeaderCredentials) {
      name = "Job-Token"
      value = System.getenv("CI_JOB_TOKEN")
    }
    authentication {
      header(HttpHeaderAuthentication)
    }
  }
}

tasks.generateSysMLv2VscodePlugin.finalizedBy editPackageJson
tasks.generateSysMLv2VscodePlugin.finalizedBy copyIcon
tasks.generateSysMLv2VscodePlugin.finalizedBy copyFileIcons
