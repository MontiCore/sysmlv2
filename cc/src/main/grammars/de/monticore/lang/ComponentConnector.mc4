/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

import de.monticore.symbols.BasicSymbols.*;

/**
 * Definiert Erweiterungen für MontiCore's CompSymbols, die aus Anforderungen
 * der MontiBelle-Gruppe und spezifisch der Transformation von Component-
 * Connector-Modellen nach Isabelle hervor gehen.
 */
component grammar ComponentConnector
  extends de.monticore.types.MCBasicTypes,
          de.monticore.expressions.ExpressionsBasis,
          de.monticore.symbols.CompSymbols,
          de.monticore.Cardinality
{

  /**
   * Erweiterungen für ComponentTypeSymbols durch Symbol Rules.
   */
  interface symbol MildComponent extends ComponentType = Name ;

  /**
   * Connectors sind keine Symbole, beinhalten aber essentielle Informationen
   * für Component-Connector-Netzwerke. Wir definieren deswegen das Interface
   * und fordern, dass ComponentTypeSymbols eine Liste von Connectors bereit halten.
   * Unsere Java-Implementation sieht vor, dass die Connectors aus dem AST der
   * jeweiligen konkreten Sprache (zB. SysML oder MontiArc) abgeleitet werden.
   */
  interface Connector = source:MCQualifiedName target:MCQualifiedName ;

  /**
   * Wir fügen hinzu:
   * - Connectors.   Sind essentielle Information für die Komposition.
   *                 Subkomponenten können als Symbole im Scope schwimmen.
   *                 Connectors nicht.
   */
  symbolrule MildComponent =
    connectors: Connector*
  ;

  /**
   * Erweiterungen für PortSymbols durch Symbol Rules.
   */
  interface symbol MildPort extends Port = Name;

  /**
   * Wir fügen hinzu:
   * - Cardinalities. Eine Alternative Implementierung durch Auflösen der
   *                  Kardinalitäten wäre sehr komplex, da Expressions
   *                  umgeschrieben werden müssten:
   *                  "forall i in {1,2,3}. myport[i].nth(7) > 5"
   *                  müsste vmtl. zu:
   *                  "forall ch in {channel_1, channel_2,...}. nth(7, ch) > 5"
   *                  transformiert werden).
   */
  symbolrule MildPort =
    cardinality: Cardinality
  ;

  /**
   * Spezifikationen sind eine abstrakte (nicht implementierbare) Variante um
   * Verhalten anzugeben.
   */
  interface symbol MildSpecification = Name ;

  symbolrule MildSpecification =
    assumptions:Expression*
    predicates:Expression*
  ;

  /**
   * Erweiterungen für SubcomponentSymbols durch Symbol Rules.
   */
  interface symbol MildInstance extends Subcomponent = Name ;

  /**
   * Parameter werden instanziiert und mit Werten belegt. Dabei können diese
   * Werte natürlich symbolischer Natur sein (zB. ein weitergereichter Parameter
   * der Vater-Komponente).
   */
  interface ParameterValue = variable:Name@Variable value:Expression ;

  /**
   * Wir fügen hinzu:
   * - ParameterValues. Wir konnten diese noch nicht in MontiCore's
   *                    Implementierung finden.
   */
  symbolrule MildInstance =
    parameterValues:ParameterValue*
  ;

  /**
   * Automaten erlauben das spezifizieren mithilfe Zustandbasierter,
   * induktiver Verhaltensmodelle.
   */
  interface symbol IAutomaton = Name ;

  /**
   * Automaten bestehen aus Zustandsraum und initialer Konfiguration
   * (Zustand und Ausgabe). Transitionen hängen vom Verarbeitungsmodell (Event
   * vs Normal) ab.
   */
  symbolrule IAutomaton =
    stateSpace: StateSpace
    initialConfiguration: Configuration*
  ;

  interface StateSpace =
    states:MCQualifiedName* variables:Name@Variable* ;

  interface Configuration =
    State Output* ;

  interface State =
    Name VariableValue* ;

  interface VariableValue =
    variable:Name@Variable value:Expression ;

  interface Output =
    port:Name@Port value:Expression ["comprehension"]? ["listValue"]? ;

  /**
   * Event-Automaten sind Realisierungen von Automaten.
   */
  interface symbol EventAutomaton extends IAutomaton = ;

  /**
   * Event-Automaten unterscheiden zwischen Transitionen für Events und
   * Transitionen für den Fortschritt der Zeit.
   */
  symbolrule EventAutomaton =
    eventTransitions: EventTransition*
    tickTransitions: Transition*
  ;

  interface EventTransition =
    port:Name@Port Transition* ;

  interface Transition =
    start:MCQualifiedName
    guard:Expression
    result:Configuration
    documentation:String;

  /**
   * "Normale" Automaten sind Realisierungen von Automaten.
   */
  interface symbol Automaton extends IAutomaton = ;

  /**
   * "Normale" Automaten haben syntaktisch gesehen nur "normale" Transitionen.
   */
  symbolrule Automaton =
    transitions: Transition*
  ;

}
